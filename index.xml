<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Saman Barghi</title>
    <link>http://samanbarghi.com/</link>
    <description>Recent content on Saman Barghi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Dec 2016 10:40:49 -0500</lastBuildDate>
    <atom:link href="http://samanbarghi.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Generate C interface from C&#43;&#43; source code using Clang libtooling</title>
      <link>http://samanbarghi.com/blog/2016/12/06/generate-c-interface-from-c-source-code-using-clang-libtooling/</link>
      <pubDate>Tue, 06 Dec 2016 10:40:49 -0500</pubDate>
      
      <guid>http://samanbarghi.com/blog/2016/12/06/generate-c-interface-from-c-source-code-using-clang-libtooling/</guid>
      <description>&lt;p&gt;I developed a &lt;a href=&#34;https://github.com/samanbarghi/uThreads&#34;&gt;concurrent user-thread library&lt;/a&gt; using C++, and was looking for a way to provide a C interface and make the functionality available in C. In order to achieve this goal, I started writting a C wrapper interface manually where each public method of a class is mapped to a function in C with the class name followed by the function name. Also, constructors are mapped to class name followed by &lt;em&gt;_create&lt;/em&gt; and destructors are mapped to the class name followed by &lt;em&gt;_destory&lt;/em&gt;. To create an object, memory is allocated using &lt;em&gt;new&lt;/em&gt; in C++ and the pointer is casted to a struct pointer in C using &lt;em&gt;reinterpret_cast&lt;/em&gt;. The casted pointer in C is passed to member functions of that object and is used to call the member function of the instance. To delete the object, the pointer is passed to the &lt;em&gt;_destroy&lt;/em&gt; function and &lt;em&gt;delete&lt;/em&gt; is used to call the deconstructor. For example, for the calss Rectangle below stored in &lt;code&gt;Rectangle.h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Rectangle{
  private:
    int length;
    int width;
  public:
  Rectangle(int l, int w): length(l), width(w){};
  int area(){ return length*width;};
  perimeter() { return 2*(lendth+width);};
  ~Rectangle(){};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two files &lt;code&gt;cwrapper.h&lt;/code&gt; and &lt;code&gt;cwrapper.cpp&lt;/code&gt; are created to map the Rectangle class to C:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#ifdef __cplusplus
extern &amp;quot;C&amp;quot;{
#endif

/* Wrapper struct to hold a pointer to
   Rectangle object in C  */
struct      WRectangle;             
typedef     struct WRectangle WRectangle;

/* Wrapper for the constructor */
WRectangle*   Rectangle_create(int l, int w);     
/* Wrapper for destructor */
void  Rectangle_destroy(WRectangle* self);
/* Wrapper for method area */
int Rectangle_area(WRectangle* self);
/* Wrapper for method perimeter */
int Rectangle_perimeter(WRectangle* self);
#ifdef __cplusplus
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;Rectangle.h&amp;quot;
#include &amp;quot;cwrapper.h&amp;quot;

#ifdef __cplusplus
extern &amp;quot;C&amp;quot;{
#endif

WRectangle*   Rectangle_create(int l, int w){
  //calling the constructor and casting the pointer to WRectangle
  return reinterpret_cast&amp;lt;WRectangle*&amp;gt;( new Rectangle(l,w) );
}
void  Rectangle_destroy(WRectangle* self){
  //calling the destructor
  delete reinterpret_cast&amp;lt;Rectangle*&amp;gt;(self);
}
int Rectangle_area(WRectangle* self){
    return reinterpret_cast&amp;lt;Rectangle*&amp;gt;(self)-&amp;gt;area();
}
int Rectangle_perimeter(WRectangle* self){
    return reinterpret_cast&amp;lt;Rectangle*&amp;gt;(self)-&amp;gt;perimeter();
}
#ifdef __cplusplus
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The wrapper functions can be used in C source code to interact with the C++ objects. I manually created two files &lt;a href=&#34;https://github.com/samanbarghi/uThreads/blob/v0.3.0/src/cwrapper.h&#34;&gt;cwrapper.h&lt;/a&gt; and &lt;a href=&#34;https://github.com/samanbarghi/uThreads/blob/v0.3.0/src/cwrapper.cpp&#34;&gt;cwrapper.cpp&lt;/a&gt; for uThreads library which make the library available in C. These files were maintainable when the library was small and there were not many classes and functions to map. However, as the library grew it became harder and harder to maintain the cwrapper functions for all the classes. Thus, I started exploring other options to generate such interface automatically, where the C++ source code is parsed and analysed and various information is extracted automatically, or to word it better I needed a compiler frontend!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://clang.llvm.org/docs/LibTooling.html&#34;&gt;Clang libtooling&lt;/a&gt; supports writing standalone tools based on Clang. To generate the C interface, I use &lt;a href=&#34;http://clang.llvm.org/docs/LibASTMatchersReference.html&#34;&gt;Clang AST Matcher&lt;/a&gt; to find public methods of specific classes and generate the C functions based on that. To get familiar with Clang AST you can refer to &lt;a href=&#34;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&#34;&gt;this articls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this tool to work, you need LLVM and Clang installed on your system. You can either &lt;a href=&#34;http://clang.llvm.org/get_started.html&#34;&gt;build them from source&lt;/a&gt;, which will take a long time to finish, or you can install precompiled packages for your operating system. I am using Calng version 4.0.0 and LLVM version 4.0.0, but I tested the code with Clang and LLVM v3.8 and it works fine. To install Clang and LLVM under ubuntu issue &lt;code&gt;sudo apt-get install llvm clang&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I am going to explain how I used Clang libtooling to generate the cwrapper files for uThreads. The finished code can be found &lt;a href=&#34;https://github.com/samanbarghi/CPP2C&#34;&gt;here&lt;/a&gt;. This is not used to generate the actual cwrapper files under uThreads, as it still needs some improvements before it can be used in production. Before I explain the code, let&amp;rsquo;s go through some rules and issues for generating the cwrapper functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cwrapper functions should only be generated for static and public member functions of each class. There is no point to map private member functions of classes to C.&lt;/li&gt;
&lt;li&gt;I am not going to map operator overloading, copy constructor and move constructor functions to C, as uThreads classes do not have any of that&lt;/li&gt;
&lt;li&gt;uThreads does not have a namespace yet (it will be added in the future), so there should be a way of figuring out the name of the classes under uThreads that I want to map to C. If there was a namespace, I could simply find all the classes under that namespace and use them to achieve the goal. But for now, I am using a list of class names to map to C stored in &lt;code&gt;std::vector&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since function overloading is not supported in C, there should be a way to map overloaded functions to C. For now I use numbering to map the overloaded functions to C. e.g., uThread_create and uThread_create_1 are constructors for uThread class.&lt;/li&gt;
&lt;li&gt;Template functions are not supported in the current version and will be supported in the future.&lt;/li&gt;
&lt;li&gt;Here, all the functions only accepts builtin types and references to uThreads objects, thus make it easy to generate the C counterparts. However, if objects from outside libraries or even standard libraries are passed to or returned from the functions, it needs additional effort to make it work. Since those classes should be listed separately and a struct in C should be generated for them and a pointer to them stored in the C code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s also take a look at the generated AST by Clang. If you pass &lt;code&gt;-Xclang -ast-dump&lt;/code&gt; to clang, you can see the AST that is generated by clang. So issueing the following command in the root directory of uThreads will print out the AST in a simple text format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clang++ -Xclang -ast-dump -fsyntax-only -I./src -std=c++11 include/uThreads.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;include/uThreads.h&lt;/code&gt; is the file that includes all the header files in uThreads, thus all uThreads classes and functions are present when passing the file to clang. Also, since many stdlib and system files are included the resulting AST is going to be very large, as it covers all the included files as well. Here are AST nodes related to constructor, destructor, and method &lt;code&gt;accept&lt;/code&gt; from class Connection in uThreads:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://samanbarghi.com/images/2016-12-06/ast-dump.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://samanbarghi.com/images/2016-12-06/ast-dump.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;AST Dump&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AST node related to constructor is of type &lt;code&gt;CXXConstructorDecl&lt;/code&gt;, AST node related to the destructor is of type &lt;code&gt;CXXDestructorDecl&lt;/code&gt;, and the accept method is of type &lt;code&gt;CXXMethodDecl&lt;/code&gt;. &lt;a href=&#34;http://clang.llvm.org/doxygen/classclang_1_1CXXConstructorDecl.html&#34;&gt;CXXConstructorDecl&lt;/a&gt; and &lt;a href=&#34;http://clang.llvm.org/doxygen/classclang_1_1CXXDestructorDecl.html&#34;&gt;CXXDestructorDecl&lt;/a&gt; are both childern of class &lt;code&gt;CXXMethodDecl&lt;/code&gt;. Hence, by finding all method declarations, i.e. &lt;code&gt;CXXMethodDecl&lt;/code&gt;, in AST we meet all the requirments to generate the C interface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://clang.llvm.org/docs/LibASTMatchersReference.html&#34;&gt;AST matchers&lt;/a&gt; are used to find and match AST nodes and perform a specific task based on the matched node. To understand the idea further, let&amp;rsquo;s use &lt;code&gt;clang-query&lt;/code&gt; which can be used to test AST matchers. For instance to query the uThreads AST, issue the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clang-query include/uThreads.h -- -I./src -std=c++11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It enters &lt;code&gt;clang-query&lt;/code&gt; console and you can issue &lt;code&gt;help&lt;/code&gt; to see the available commands. Let&amp;rsquo;s use the &lt;code&gt;match&lt;/code&gt; command to find all the &lt;code&gt;CXXMethodDecl&lt;/code&gt; in the AST:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clang-query&amp;gt; match cxxMethodDecl()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, since many files are included in the source code, the output is going to be large and includes all the methods, constructors and destructors from uThreads and all other classes included. Here is part of the output for class &lt;code&gt;Connection&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match #6987:

./src/io/Network.h:61:5: note: &amp;quot;root&amp;quot; binds here
    Connection() :
    ^~~~~~~~~~~~~~

Match #6988:

./src/io/Network.h:72:5: note: &amp;quot;root&amp;quot; binds here
    Connection(int fd) :
    ^~~~~~~~~~~~~~~~~~~~

Match #6989:

./src/io/Network.h:87:5: note: &amp;quot;root&amp;quot; binds here
    Connection(int domain, int type, int protocol) throw(std::system_error);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Match #6990:

./src/io/Network.h:89:5: note: &amp;quot;root&amp;quot; binds here
    ~Connection();
    ^~~~~~~~~~~~~

Match #6991:

./src/io/Network.h:99:5: note: &amp;quot;root&amp;quot; binds here
    int accept(Connection *conn, struct sockaddr *addr, socklen_t *addrlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, for the C interface we are only interested in public methods. So let&amp;rsquo;s change the query to reflect that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clang-query&amp;gt; match cxxMethodDecl(isPublic())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time only the public methods are printed to the output. Also, since we are only interested in classes defined in uThreads library, I am going to use specific class names to limit the output. For example, to see all the public methods from class &lt;code&gt;Connection&lt;/code&gt; issue the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clang-query&amp;gt; set output dump
clang-query&amp;gt; match cxxMethodDecl(isPublic(), ofClass(hasName(&amp;quot;Connection&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time I changed the output to show AST dump instead of diagnostics, which results in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Binding for &amp;quot;root&amp;quot;:
CXXConstructorDecl 0x3712520 &amp;lt;./src/io/Network.h:61:5, line:64:5&amp;gt; line:61:5 Connection &#39;void (void)&#39;
|-CXXCtorInitializer Field 0x3712178 &#39;pd&#39; &#39;class PollData *&#39;
| `-CXXDefaultInitExpr 0x37162d8 &amp;lt;col:5&amp;gt; &#39;class PollData *&#39;
|-CXXCtorInitializer Field 0x37121d0 &#39;fd&#39; &#39;int&#39;
| `-UnaryOperator 0x3716260 &amp;lt;line:62:16, col:17&amp;gt; &#39;int&#39; prefix &#39;-&#39;
|   `-IntegerLiteral 0x3716240 &amp;lt;col:17&amp;gt; &#39;int&#39; 1
|-CompoundStmt 0x37163a8 &amp;lt;col:19, line:64:5&amp;gt;
| `-CXXMemberCallExpr 0x3716380 &amp;lt;line:63:9, col:14&amp;gt; &#39;void&#39;
|   `-MemberExpr 0x3716348 &amp;lt;col:9&amp;gt; &#39;&amp;lt;bound member function type&amp;gt;&#39; -&amp;gt;init 0x3712298
|     `-CXXThisExpr 0x3716330 &amp;lt;col:9&amp;gt; &#39;class Connection *&#39; this
`-FullComment 0x3940930 &amp;lt;line:56:7, line:59:47&amp;gt;
  |-ParagraphComment 0x3940800 &amp;lt;line:56:7&amp;gt;
  | `-TextComment 0x39407d0 &amp;lt;col:7&amp;gt; Text=&amp;quot; &amp;quot;
  |-BlockCommandComment 0x3940820 &amp;lt;col:8, col:52&amp;gt; Name=&amp;quot;brief&amp;quot;
  | `-ParagraphComment 0x3940880 &amp;lt;col:14, col:52&amp;gt;
  |   `-TextComment 0x3940850 &amp;lt;col:14, col:52&amp;gt; Text=&amp;quot; Create a Connection that does not have&amp;quot;
  `-ParagraphComment 0x39408f0 &amp;lt;line:58:7, line:59:47&amp;gt;
    |-TextComment 0x39408a0 &amp;lt;line:58:7, col:65&amp;gt; Text=&amp;quot; This is useful for accept or socket functions that require&amp;quot;
    `-TextComment 0x39408c0 &amp;lt;line:59:7, col:47&amp;gt; Text=&amp;quot; a Connection object without fd being set&amp;quot;


Match #2:

Binding for &amp;quot;root&amp;quot;:
CXXConstructorDecl 0x37126a0 &amp;lt;./src/io/Network.h:72:5, line:75:5&amp;gt; line:72:5 Connection &#39;void (int)&#39;
|-ParmVarDecl 0x3712618 &amp;lt;col:16, col:20&amp;gt; col:20 used fd &#39;int&#39;
|-CXXCtorInitializer Field 0x3712178 &#39;pd&#39; &#39;class PollData *&#39;
| `-CXXDefaultInitExpr 0x3716460 &amp;lt;col:5&amp;gt; &#39;class PollData *&#39;
|-CXXCtorInitializer Field 0x37121d0 &#39;fd&#39; &#39;int&#39;
| `-ImplicitCastExpr 0x3716420 &amp;lt;line:73:16&amp;gt; &#39;int&#39; &amp;lt;LValueToRValue&amp;gt;
|   `-DeclRefExpr 0x37163c8 &amp;lt;col:16&amp;gt; &#39;int&#39; lvalue ParmVar 0x3712618 &#39;fd&#39; &#39;int&#39;
|-CompoundStmt 0x3716530 &amp;lt;col:20, line:75:5&amp;gt;
| `-CXXMemberCallExpr 0x3716508 &amp;lt;line:74:9, col:14&amp;gt; &#39;void&#39;
|   `-MemberExpr 0x37164d0 &amp;lt;col:9&amp;gt; &#39;&amp;lt;bound member function type&amp;gt;&#39; -&amp;gt;init 0x3712298
|     `-CXXThisExpr 0x37164b8 &amp;lt;col:9&amp;gt; &#39;class Connection *&#39; this
`-FullComment 0x3940ba0 &amp;lt;line:66:7, line:70:45&amp;gt;
  |-ParagraphComment 0x39409d0 &amp;lt;line:66:7&amp;gt;
  | `-TextComment 0x39409a0 &amp;lt;col:7&amp;gt; Text=&amp;quot; &amp;quot;
  |-BlockCommandComment 0x39409f0 &amp;lt;col:8, line:67:7&amp;gt; Name=&amp;quot;brief&amp;quot;
  | `-ParagraphComment 0x3940a70 &amp;lt;line:66:14, line:67:7&amp;gt;
  |   |-TextComment 0x3940a20 &amp;lt;line:66:14, col:61&amp;gt; Text=&amp;quot; Create a connection object with the provided fd&amp;quot;
  |   `-TextComment 0x3940a40 &amp;lt;line:67:7&amp;gt; Text=&amp;quot; &amp;quot;
  |-ParamCommandComment 0x3940a90 &amp;lt;col:8, col:16&amp;gt; [in] implicitly Param=&amp;quot;fd&amp;quot; ParamIndex=0
  | `-ParagraphComment 0x3940af0 &amp;lt;&amp;lt;invalid sloc&amp;gt;&amp;gt;
  `-ParagraphComment 0x3940b60 &amp;lt;line:69:7, line:70:45&amp;gt;
    |-TextComment 0x3940b10 &amp;lt;line:69:7, col:71&amp;gt; Text=&amp;quot; If the connection is already established by other means, set the&amp;quot;
    `-TextComment 0x3940b30 &amp;lt;line:70:7, col:45&amp;gt; Text=&amp;quot; fd and add it to the polling structure&amp;quot;


Match #3:

Binding for &amp;quot;root&amp;quot;:
CXXConstructorDecl 0x37129b0 &amp;lt;./src/io/Network.h:87:5, col:75&amp;gt; col:5 Connection &#39;void (int, int, int) throw(std::system_error)&#39;
|-ParmVarDecl 0x3712798 &amp;lt;col:16, col:20&amp;gt; col:20 domain &#39;int&#39;
|-ParmVarDecl 0x3712808 &amp;lt;col:28, col:32&amp;gt; col:32 type &#39;int&#39;
|-ParmVarDecl 0x3712878 &amp;lt;col:38, col:42&amp;gt; col:42 protocol &#39;int&#39;
`-FullComment 0x3940ec0 &amp;lt;line:78:7, line:86:5&amp;gt;
  |-ParagraphComment 0x3940c40 &amp;lt;line:78:7&amp;gt;
  | `-TextComment 0x3940c10 &amp;lt;col:7&amp;gt; Text=&amp;quot; &amp;quot;
  |-BlockCommandComment 0x3940c60 &amp;lt;col:8, line:79:7&amp;gt; Name=&amp;quot;brief&amp;quot;
  | `-ParagraphComment 0x3940ce0 &amp;lt;line:78:14, line:79:7&amp;gt;
  |   |-TextComment 0x3940c90 &amp;lt;line:78:14, col:65&amp;gt; Text=&amp;quot; Same as socket syscall adds | SOCK_NONBLOCK to type&amp;quot;
  |   `-TextComment 0x3940cb0 &amp;lt;line:79:7&amp;gt; Text=&amp;quot; &amp;quot;
  |-BlockCommandComment 0x3940d00 &amp;lt;col:8, col:37&amp;gt; Name=&amp;quot;return&amp;quot;
  | `-ParagraphComment 0x3940d60 &amp;lt;col:15, col:37&amp;gt;
  |   `-TextComment 0x3940d30 &amp;lt;col:15, col:37&amp;gt; Text=&amp;quot; same as socket syscall&amp;quot;
  |-ParagraphComment 0x3940e20 &amp;lt;line:81:7, line:84:29&amp;gt;
  | |-TextComment 0x3940d80 &amp;lt;line:81:7, col:69&amp;gt; Text=&amp;quot; Throws a std::system_error exception. Do not call from C code.&amp;quot;
  | |-TextComment 0x3940da0 &amp;lt;line:82:7, col:68&amp;gt; Text=&amp;quot; The unerlying socket is always nonbelocking. This is achieved&amp;quot;
  | |-TextComment 0x3940dc0 &amp;lt;line:83:7, col:60&amp;gt; Text=&amp;quot; by adding a  (| SOCK_NONBLOCK) to type, thus requires&amp;quot;
  | `-TextComment 0x3940de0 &amp;lt;line:84:7, col:29&amp;gt; Text=&amp;quot; linux kernels &amp;gt; 2.6.27&amp;quot;
  `-ParagraphComment 0x3940e70 &amp;lt;line:86:1, col:5&amp;gt;
    `-TextComment 0x3940e40 &amp;lt;col:1, col:5&amp;gt; Text=&amp;quot;     &amp;quot;


Match #4:

Binding for &amp;quot;root&amp;quot;:
CXXDestructorDecl 0x3712ad0 &amp;lt;./src/io/Network.h:89:5, col:17&amp;gt; col:5 ~Connection &#39;void (void)&#39; noexcept-unevaluated 0x3712ad0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the final version of the matcher to find the public methods of interest and generate C source code based on that. We start by creating an option category which is applied to all command-line options. Also you can define new options for the command line tool using option tables, so arguments can be passed to your program. I am not going to use that feature in the current implementation, but included &amp;ldquo;-o&amp;rdquo; option just to show how it&amp;rsquo;s done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Options **/
static cl::OptionCategory CPP2CCategory(&amp;quot;CPP2C options&amp;quot;);
static std::unique_ptr&amp;lt;opt::OptTable&amp;gt; Options(createDriverOptTable());
static cl::opt&amp;lt;std::string&amp;gt; OutputFilename(&amp;quot;o&amp;quot;, cl::desc(Options-&amp;gt;getOptionHelpText((options::OPT_o))));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also create a struct with custom string streams which is used to generate the final C &lt;code&gt;.h&lt;/code&gt; and &lt;code&gt;.c&lt;/code&gt; files, a vector of the name of the classes from uThreads to be explored and a map of function names to an integer, which is used to keep track of functions and detect overleaded functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Classes to be mapped to C **/
struct OutputStreams{
	string headerString;
	string bodyString;

	llvm::raw_string_ostream HeaderOS;
	llvm::raw_string_ostream BodyOS;

	OutputStreams() : headerString(&amp;quot;&amp;quot;), bodyString(&amp;quot;&amp;quot;), HeaderOS(headerString), BodyOS(bodyString){};
};


vector&amp;lt;string&amp;gt; ClassList = {&amp;quot;uThread&amp;quot;, &amp;quot;kThread&amp;quot;, &amp;quot;Cluster&amp;quot;, &amp;quot;Connection&amp;quot;, &amp;quot;Mutex&amp;quot;, &amp;quot;OwnerLock&amp;quot;, &amp;quot;ConditionVariable&amp;quot;, &amp;quot;Semaphore&amp;quot;, &amp;quot;uThreadPool&amp;quot;};

map&amp;lt;string, int&amp;gt; funcList;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we write the main function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int main(int argc, const char **argv) {
	// parse the command-line args passed to your code
	CommonOptionsParser op(argc, argv, CPP2CCategory);
	// create a new Clang Tool instance (a LibTooling environment)
	ClangTool Tool(op.getCompilations(), op.getSourcePathList());


	// run the Clang Tool, creating a new FrontendAction
	return Tool.run(newFrontendActionFactory&amp;lt;MyFrontendAction&amp;gt;().get());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whithin the main function, we pass the OptionCategory to the &lt;code&gt;CommonOptionsParser&lt;/code&gt; along with argc and argv to parse the arguments passed to the code. Next, We create a &lt;code&gt;ClangTool&lt;/code&gt; instance and pass the Compilation and source path lists to it. Finally, the ClangTool needs a new FrontendAction for each translation unit we run
on.  Thus, it takes a FrontendActionFactory as parameter. To create a &lt;code&gt;FrontendActionFactory&lt;/code&gt; from a given FrontendAction type, we call &lt;code&gt;newFrontendActionFactory&amp;lt;MyFrontendAction&amp;gt;()&lt;/code&gt;. &lt;code&gt;MyFrontendAction&lt;/code&gt; is a &lt;code&gt;ASTFrontendAction&lt;/code&gt; which is used for AST consumer-based frontend actions, and since we are going to rely on AST matchers we use the &lt;code&gt;ASTFrontendAction&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// For each source file provided to the tool, a new FrontendAction is created.
 class MyFrontendAction: public ASTFrontendAction {
public:
	MyFrontendAction() {
		OS.HeaderOS &amp;lt;&amp;lt; 	&amp;quot;#ifndef UTHREADS_CWRAPPER_H\n&amp;quot;
						&amp;quot;#define UTHREADS_CWRAPPER_H_\n&amp;quot;
						&amp;quot;#include &amp;lt;pthread.h&amp;gt;\n&amp;quot;
						&amp;quot;#include &amp;lt;sys/types.h&amp;gt;\n&amp;quot;
						&amp;quot;#include &amp;lt;sys/socket.h&amp;gt;\n&amp;quot;
						&amp;quot;#include &amp;lt;inttypes.h&amp;gt;\n\n&amp;quot;

						&amp;quot;#ifdef __cplusplus\n&amp;quot;
						&amp;quot;extern \&amp;quot;C\&amp;quot;{\n&amp;quot;
						&amp;quot;#endif\n&amp;quot;
						&amp;quot;#include &amp;lt;stdbool.h&amp;gt;\n&amp;quot;;
		OS.BodyOS &amp;lt;&amp;lt; &amp;quot;#include \&amp;quot;generic/basics.h\&amp;quot;\n&amp;quot;
					&amp;quot;#include \&amp;quot;cwrapper.h\&amp;quot;\n&amp;quot;
					&amp;quot;#include \&amp;quot;runtime/uThread.h\&amp;quot;\n&amp;quot;
					&amp;quot;#include \&amp;quot;runtime/uThreadPool.h\&amp;quot;\n&amp;quot;
					&amp;quot;#include \&amp;quot;runtime/kThread.h\&amp;quot;\n&amp;quot;
					&amp;quot;#include \&amp;quot;io/Network.h\&amp;quot;\n&amp;quot;
						&amp;quot;#ifdef __cplusplus\n&amp;quot;
						&amp;quot;extern \&amp;quot;C\&amp;quot;{\n&amp;quot;
						&amp;quot;#endif\n&amp;quot;;

	}

	void EndSourceFileAction() override {

		StringRef headerFile(&amp;quot;cwrapper.h&amp;quot;);
		StringRef bodyFile(&amp;quot;cwrapper.cpp&amp;quot;);

        // Open the output file
        std::error_code EC;
        llvm::raw_fd_ostream HOS(headerFile, EC, llvm::sys::fs::F_None);
        if (EC) {
            llvm::errs() &amp;lt;&amp;lt; &amp;quot;while opening &#39;&amp;quot; &amp;lt;&amp;lt; headerFile&amp;lt;&amp;lt; &amp;quot;&#39;: &amp;quot;
            &amp;lt;&amp;lt; EC.message() &amp;lt;&amp;lt; &#39;\n&#39;;
            exit(1);
        }
        llvm::raw_fd_ostream BOS(bodyFile, EC, llvm::sys::fs::F_None);
        if (EC) {
            llvm::errs() &amp;lt;&amp;lt; &amp;quot;while opening &#39;&amp;quot; &amp;lt;&amp;lt; bodyFile&amp;lt;&amp;lt; &amp;quot;&#39;: &amp;quot;
            &amp;lt;&amp;lt; EC.message() &amp;lt;&amp;lt; &#39;\n&#39;;
            exit(1);
        }


		OS.HeaderOS &amp;lt;&amp;lt; &amp;quot;#ifdef __cplusplus\n&amp;quot;
						&amp;quot;}\n&amp;quot;
						&amp;quot;#endif\n&amp;quot;
						&amp;quot;#endif /* UTHREADS_CWRAPPER_H_ */\n&amp;quot;;

		OS.BodyOS&amp;lt;&amp;lt; &amp;quot;#ifdef __cplusplus\n&amp;quot;
						&amp;quot;}\n&amp;quot;
						&amp;quot;#endif\n&amp;quot;;

		OS.HeaderOS.flush();
		OS.BodyOS.flush();
		HOS&amp;lt;&amp;lt; OS.headerString &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
		BOS&amp;lt;&amp;lt; OS.bodyString &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;

	}

	std::unique_ptr&amp;lt;ASTConsumer&amp;gt; CreateASTConsumer(CompilerInstance &amp;amp;CI,
			StringRef file) override {

		return llvm::make_unique&amp;lt;MyASTConsumer&amp;gt;(OS);
	}

private:
	OutputStreams OS;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MyFrontendAction&lt;/code&gt; includes an instance of &lt;code&gt;OutputStreams&lt;/code&gt; that has two string streams, one for the header file and the other one for the &lt;code&gt;.cpp&lt;/code&gt; file. Both streams are intialized with the required include statements and &lt;code&gt;#ifdef&lt;/code&gt; statements to be placed at the beginning of the file. The &lt;code&gt;EndSourceFileAction&lt;/code&gt; is a callback at the end of processing a single input, and is used to append required strings to the end of the streams and save the streams to &lt;code&gt;cwrapper.h&lt;/code&gt; and &lt;code&gt;cwrapper.cpp&lt;/code&gt; files. Finally, &lt;code&gt;CreateASTConsumer&lt;/code&gt; is called to create the AST consumer object for this action. Here an instance of &lt;code&gt;MyASTConsumer&lt;/code&gt; is created and returned, we also pass the &lt;code&gt;OutputStreams&lt;/code&gt; instance by reference, so later it can be passed to handlers. AST consumer, in our case, is responsible for registering matchers and run them over the AST. Here, the list of classes is used along with the &lt;code&gt;cxxMethodDecl&lt;/code&gt; matcher we came up with earlier to match the methods of interest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Implementation of the ASTConsumer interface for reading an AST produced
// by the Clang parser. It registers a couple of matchers and runs them on
// the AST.
class MyASTConsumer: public ASTConsumer {
public:
	MyASTConsumer(OutputStreams&amp;amp; os) : OS(os),
			HandlerForClassMatcher(os){
		// Add a simple matcher for finding &#39;if&#39; statements.

		for(string&amp;amp; className : ClassList){
			OS.HeaderOS &amp;lt;&amp;lt; &amp;quot;struct      W&amp;quot;&amp;lt;&amp;lt; className &amp;lt;&amp;lt; &amp;quot;; \n&amp;quot;
						   &amp;quot;typedef     struct W&amp;quot;&amp;lt;&amp;lt; className &amp;lt;&amp;lt; &amp;quot; W&amp;quot;&amp;lt;&amp;lt; className &amp;lt;&amp;lt; &amp;quot;;\n&amp;quot;;
			//oss.push_back(std::move(os))

			DeclarationMatcher classMatcher = cxxMethodDecl(isPublic(), ofClass(hasName(className))).bind(&amp;quot;publicMethodDecl&amp;quot;);
			Matcher.addMatcher(classMatcher, &amp;amp;HandlerForClassMatcher);
		}

	}

	void HandleTranslationUnit(ASTContext &amp;amp;Context) override {
		// Run the matchers when we have the whole TU parsed.
		Matcher.matchAST(Context);
	}

private:
	OutputStreams&amp;amp; OS;
	classMatchHandler HandlerForClassMatcher;

	MatchFinder Matcher;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MyASTConsumer&lt;/code&gt; has an instance of a &lt;code&gt;classMatchHandler&lt;/code&gt; and a &lt;code&gt;MatchFinder&lt;/code&gt;. &lt;code&gt;MatchFinder&lt;/code&gt; is used to register matchers and handlers and to apply the matchers to AST Context and call the related handlers when a match is found. In the constructor, we add all the matchers using &lt;code&gt;addMatcher&lt;/code&gt;, and under the &lt;code&gt;HandleTranslationUnit&lt;/code&gt; we call &lt;code&gt;matchAST&lt;/code&gt; to perform the matches and do the callbacks. We also bind the match to a string (&lt;code&gt;publicMethodDecl&lt;/code&gt;), which is used later to differentiate among matchers. Also, notice that for each class a struct is generated with name &lt;code&gt;WclassName&lt;/code&gt; along with a typedef with the same name. As explained eariler, this struct is used to hold a pointer to the instance of the class in C.&lt;/p&gt;

&lt;p&gt;Class &lt;code&gt;classMatchHandler&lt;/code&gt; is a child of &lt;code&gt;MatchFinder::MatchCallBack&lt;/code&gt; class, and is used to perform the required task after a match is found. We also override member function &lt;code&gt;run&lt;/code&gt;, that accepts a &lt;code&gt;MatchResult&lt;/code&gt; and is called upon finding a match. The first step is to check whether the matched node with the provided string &lt;code&gt;publicMethodDecl&lt;/code&gt; is of type &lt;code&gt;cxxMethodDecl&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (const CXXMethodDecl *cmd = Result.Nodes.getNodeAs&amp;lt;CXXMethodDecl&amp;gt;(&amp;quot;publicMethodDecl&amp;quot;)){
			string methodName = &amp;quot;&amp;quot;;
			string className = cmd-&amp;gt;getParent()-&amp;gt;getDeclName().getAsString();
			string returnType = &amp;quot;&amp;quot;;
			string returnCast = &amp;quot;&amp;quot;;
			bool shouldReturn, isPointer;
			string self = &amp;quot;W&amp;quot; + className + &amp;quot;* self&amp;quot;;
			string separator = &amp;quot;, &amp;quot;;
			string bodyEnd = &amp;quot;&amp;quot;;

			std::stringstream functionBody;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If so, we create a few of strings variables in order to generate the final C method. &lt;code&gt;className&lt;/code&gt; captures the name of the parent class of the method, i.e. the name used to find the method in the matcher, by getting the declaration name of the parent class as string. To map member functions to C, there is a need to send the pointer to the object as the first argument, so the string &lt;code&gt;self&lt;/code&gt; contains the string that represents the pointer to the struct in C that is named as &lt;em&gt;self&lt;/em&gt;. The rest of the variables are explained later.&lt;/p&gt;

&lt;p&gt;As explained eariler, operator overloading is ignored and not mapped to C, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//ignore operator overloadings
if(cmd-&amp;gt;isOverloadedOperator())
  return;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we check whether the matched method is a constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//constructor
if (const CXXConstructorDecl* ccd = dyn_cast&amp;lt;CXXConstructorDecl&amp;gt;(cmd)) {
  if(ccd-&amp;gt;isCopyConstructor() || ccd-&amp;gt;isMoveConstructor()) return;
  methodName = &amp;quot;_create&amp;quot;;
  returnType = &amp;quot;W&amp;quot; + className + &amp;quot;*&amp;quot;;
  self = &amp;quot;&amp;quot;;
  separator = &amp;quot;&amp;quot;;
  functionBody &amp;lt;&amp;lt; &amp;quot;return reinterpret_cast&amp;lt;&amp;quot;&amp;lt;&amp;lt; returnType &amp;lt;&amp;lt; &amp;quot;&amp;gt;( new &amp;quot; &amp;lt;&amp;lt; className &amp;lt;&amp;lt; &amp;quot;(&amp;quot;;
  bodyEnd += &amp;quot;))&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;cmd&lt;/code&gt; can be dynamically casted to &lt;code&gt;CXXConstructorDecl&lt;/code&gt;, it means the method is a constructor. If the constructor is a copy constructor or move constructor we are not going to map it to C as explained above. The final method name should be &lt;code&gt;className_create&lt;/code&gt;, so we set the &lt;code&gt;methodName&lt;/code&gt; to be &lt;code&gt;_create&lt;/code&gt; and later concatenate it to the calss name. Also, since the constructor creates an instance of the object and return a pointer to the created object, the return type should be the same as the struct type that holds the pointer to the object in C. &lt;code&gt;self&lt;/code&gt; string will be empty, since there is no instance of the object yet to be passed to the constructor. &lt;code&gt;separator&lt;/code&gt; is used to separate function arguments in the string, and since there is no self, the next argument do not need a comma before it. &lt;code&gt;functionBody&lt;/code&gt; is a string stream that holds the information related to the function definition. For the constructor, we know that it returns the casted pointer to the object created by &lt;code&gt;new&lt;/code&gt;, so the related string is generated accordingly. &lt;code&gt;bodyEnd&lt;/code&gt; holds the string to complete the function definition, and since there are two open parentheses, they should be closed after arguments are placed in between the parentheses.&lt;/p&gt;

&lt;p&gt;Next, we check wether the method is a destructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  }else if (isa&amp;lt;CXXDestructorDecl&amp;gt;(cmd)) {
  methodName = &amp;quot;_destroy&amp;quot;;
  returnType = &amp;quot;void&amp;quot;;
  functionBody &amp;lt;&amp;lt; &amp;quot; delete reinterpret_cast&amp;lt;&amp;quot;&amp;lt;&amp;lt;className &amp;lt;&amp;lt; &amp;quot;*&amp;gt;(self)&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the method declaration &lt;code&gt;isa&amp;lt;CXXDestructorDecl&amp;gt;&lt;/code&gt;, it means the method is a destructor. Thus, the &lt;code&gt;methodName&lt;/code&gt; should be &lt;code&gt;_destroy&lt;/code&gt;, &lt;code&gt;returnType&lt;/code&gt; should be void, and &lt;code&gt;functionBody&lt;/code&gt; just calls &lt;code&gt;delete&lt;/code&gt; on the casted pointer.&lt;/p&gt;

&lt;p&gt;If the method is not a constructor, destructor, or overloaded operator, it is a member or static function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;}else{
  methodName = &amp;quot;_&amp;quot; + cmd-&amp;gt;getNameAsString();
  const QualType qt = cmd-&amp;gt;getReturnType();
  std::tie(returnType, returnCast, isPointer, shouldReturn) = determineCType(qt);

  //should this function return?
  if(shouldReturn)
  	functionBody &amp;lt;&amp;lt; &amp;quot;return &amp;quot;;

  if(returnCast != &amp;quot;&amp;quot;){
  	//if not pointer and it needs to be casted, then return the pointer
  	if(!isPointer)
  		functionBody &amp;lt;&amp;lt; &amp;quot;&amp;amp;&amp;quot;;
  	functionBody &amp;lt;&amp;lt; &amp;quot;reinterpret_cast&amp;lt;&amp;quot;&amp;lt;&amp;lt; returnType &amp;lt;&amp;lt; &amp;quot;&amp;gt;(&amp;quot;;
  	bodyEnd += &amp;quot;)&amp;quot;;
  }

  //if Static call it properly
  if(cmd-&amp;gt;isStatic())
  	functionBody &amp;lt;&amp;lt;className &amp;lt;&amp;lt; &amp;quot;::&amp;quot; &amp;lt;&amp;lt; cmd-&amp;gt;getNameAsString() &amp;lt;&amp;lt; &amp;quot;(&amp;quot;;
  //if not  use the passed object to call the method
  else
  	functionBody &amp;lt;&amp;lt; &amp;quot;reinterpret_cast&amp;lt;&amp;quot;&amp;lt;&amp;lt;className&amp;lt;&amp;lt;&amp;quot;*&amp;gt;(self)-&amp;gt;&amp;quot; &amp;lt;&amp;lt; cmd-&amp;gt;getNameAsString() &amp;lt;&amp;lt; &amp;quot;(&amp;quot;;

  bodyEnd += &amp;quot;)&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;methodName&lt;/code&gt; in this case is the same as the name of the method with prefix &lt;code&gt;_&lt;/code&gt;. Next step is to determine what is the return type of the method, for that purpose we use &lt;code&gt;getReturnType&lt;/code&gt; to find the &lt;code&gt;QualType&lt;/code&gt;. Then, we pass the &lt;code&gt;QualType&lt;/code&gt; to the helper function &lt;code&gt;determineCType&lt;/code&gt;, in order to find the type, whether it needs casting, whether it&amp;rsquo;s a pointer and whether it&amp;rsquo;s a void type. Here is the definition of the &lt;code&gt;determineCType&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple&amp;lt;string, string, bool, bool&amp;gt; determineCType(const QualType&amp;amp; qt){

  string CType = &amp;quot;&amp;quot;;
  string CastType = &amp;quot;&amp;quot;; //whether this should be casted or not
  bool 	isPointer = false;
  bool 	shoulReturn = true;

  //if it is builtin type use it as is
  if(qt-&amp;gt;isBuiltinType() || (qt-&amp;gt;isPointerType() &amp;amp;&amp;amp; qt-&amp;gt;getPointeeType()-&amp;gt;isBuiltinType())){
    CType = qt.getAsString();
    if(qt-&amp;gt;isVoidType())
      shoulReturn = false;
  //if it is a CXXrecordDecl then return a pointer to WName*
  }else if(qt-&amp;gt;isRecordType()){
    const CXXRecordDecl* crd = qt-&amp;gt;getAsCXXRecordDecl();
    string recordName = crd-&amp;gt;getNameAsString();
    CType = &amp;quot;W&amp;quot; + recordName + &amp;quot;*&amp;quot;;
    CastType = recordName+ &amp;quot;*&amp;quot;;

  }else if( (qt-&amp;gt;isReferenceType() || qt-&amp;gt;isPointerType()) &amp;amp;&amp;amp; qt-&amp;gt;getPointeeType()-&amp;gt;isRecordType()){
    isPointer = true; //to properly differentiate among cast types
    const CXXRecordDecl* crd = qt-&amp;gt;getPointeeType()-&amp;gt;getAsCXXRecordDecl();
    string recordName = crd-&amp;gt;getNameAsString();
    if ( std::find(ClassList.begin(), ClassList.end(), recordName) != ClassList.end() ){
      CType = &amp;quot;W&amp;quot; + recordName + &amp;quot;*&amp;quot;;
      CastType = recordName + &amp;quot;*&amp;quot;;
    }else{
      CType = recordName+&amp;quot;*&amp;quot;;
    }

  }
  return make_tuple(CType, CastType, isPointer, shoulReturn);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function returns 4 variables; one that reperesents the type that should be returned, one that shows what the return type should be casted from, and two booleans reperesenting whether the type is a pointer and whether the function needs a &lt;code&gt;return&lt;/code&gt; statement before the function call. First, if the type is a builtin type, or is a pointer to a builtin type, there is no need to cast it (castType is left empty), and if this builtin type is &lt;code&gt;void&lt;/code&gt; there is no need to put the &lt;code&gt;return&lt;/code&gt; keyword before calling the function. Otherwise, if the type is a record type (class or struct), since in uThreads all functions only return record types that is defined whitin uThreads library, we can be sure that by casting the return type to &lt;code&gt;WclassName&lt;/code&gt; struct, we are returning the instance of the object (it can be problematic if the returned object needs to be copied, since the original memory might be freed at the end of the function and the returned pointer is not valid anymore. But since in uThreads all objects are returned either by reference or only pointers are being returned, this condition does not apply to uThreads. Thus, it should be modified if you need to use it in another projects. This part is mainly relevant for function arguments, when later &lt;code&gt;determineCType&lt;/code&gt; is called to determine the type of the passed arguments). Finally, if the return type is a pointer or reference to a record type, and the pointer is to a class under the uThreads list of classes, return the &lt;code&gt;WclassName*&lt;/code&gt;, otherwise return the pointer itself.&lt;/p&gt;

&lt;p&gt;Continuing on determining the return type, if the &lt;code&gt;shouldRetran&lt;/code&gt; flag is true, a &lt;code&gt;return&lt;/code&gt; keyword is added before the function call. If the return variable requires casting, insert &lt;code&gt;reinterpret_cast&lt;/code&gt; along with the C return type before calling the function. Finally, generate the function call: if the function is static, call it by using &lt;code&gt;className::methodName&lt;/code&gt;, and if not use &lt;code&gt;reinterpret_cast&lt;/code&gt; to cast the passed &lt;code&gt;self&lt;/code&gt; pointer to the object pointer and call the function by  &lt;code&gt;self-&amp;gt;methodName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, let&amp;rsquo;s generate the function declaration in C by concatenating the related strings together:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;std::stringstream funcname;
funcname &amp;lt;&amp;lt; returnType &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; className &amp;lt;&amp;lt; methodName;

auto it = funcList.find(funcname.str());

if(it != funcList.end()){
	it-&amp;gt;second++;
	funcname &amp;lt;&amp;lt; &amp;quot;_&amp;quot; &amp;lt;&amp;lt; it-&amp;gt;second ;
}else{
	funcList[funcname.str()] = 0;
}

funcname &amp;lt;&amp;lt; &amp;quot;(&amp;quot; &amp;lt;&amp;lt; self;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Function name is of form &lt;code&gt;returnType className_methodName&lt;/code&gt; in C. In addition, as explained earlier, if there is any function overloading, a number is added to the end of the function name. Thus, a map of function names to integer is used to keep track of the number of times the function of the specified class appeared. If it appears more than one time, a suffix &lt;code&gt;_n&lt;/code&gt; is added to the end of the function, where &lt;code&gt;n&lt;/code&gt; is the number of times the function appeared. Finally, we add a parentheses to the end of the function name, along with the &lt;code&gt;self&lt;/code&gt; string, that reperesnts whether a pointer to the object is passed to the function or not, and start generating the argument list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(unsigned int i=0; i&amp;lt;cmd-&amp;gt;getNumParams(); i++)
{
  const QualType qt = cmd-&amp;gt;parameters()[i]-&amp;gt;getType();
  std::tie(returnType, returnCast, isPointer, shouldReturn) = determineCType(qt);
  funcname &amp;lt;&amp;lt; separator &amp;lt;&amp;lt; returnType &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
  funcname &amp;lt;&amp;lt; cmd-&amp;gt;parameters()[i]-&amp;gt;getQualifiedNameAsString() &amp;lt;&amp;lt; &amp;quot;&amp;quot;;

  if(i !=0 )
    functionBody &amp;lt;&amp;lt; separator;
  if(returnCast == &amp;quot;&amp;quot;)
    functionBody &amp;lt;&amp;lt; cmd-&amp;gt;parameters()[i]-&amp;gt;getQualifiedNameAsString();
  else{
    if(!isPointer)
      functionBody &amp;lt;&amp;lt; &amp;quot;*&amp;quot;;
    functionBody &amp;lt;&amp;lt; &amp;quot;reinterpret_cast&amp;lt;&amp;quot; &amp;lt;&amp;lt; returnCast &amp;lt;&amp;lt; &amp;quot;&amp;gt;(&amp;quot;&amp;lt;&amp;lt; cmd-&amp;gt;parameters()[i]-&amp;gt;getQualifiedNameAsString() &amp;lt;&amp;lt; &amp;quot;)&amp;quot;;

  }

  string separator = &amp;quot;, &amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate the argument list in C, we iterate through the method arguments by using &lt;code&gt;getNumParams&lt;/code&gt; and &lt;code&gt;parameters&lt;/code&gt; array. The type of the argument in C is determined by calling to &lt;code&gt;determineCType&lt;/code&gt;, and based on the tpe of the argument it might require casting. After generating the list of the arguments, we simply close the parentheses and print the generated function name and body in header and body string streams:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;funcname &amp;lt;&amp;lt; &amp;quot;)&amp;quot;;

OS.HeaderOS &amp;lt;&amp;lt; funcname.str() &amp;lt;&amp;lt; &amp;quot;;\n&amp;quot;;

OS.BodyOS &amp;lt;&amp;lt; funcname.str() &amp;lt;&amp;lt; &amp;quot;{\n    &amp;quot;;
OS.BodyOS &amp;lt;&amp;lt; functionBody.str();
OS.BodyOS &amp;lt;&amp;lt; bodyEnd &amp;lt;&amp;lt; &amp;quot;; \n}\n&amp;quot; ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As explained earlier, &lt;code&gt;BodyOS&lt;/code&gt; and &lt;code&gt;HeaderOS&lt;/code&gt; streams are flushed to related files in the end. To build and install the binary simply clone the repo and issue the following commands (you require cmake and make to be installed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/samanbarghi/CPP2C
cd CPP2C
mkdir build
cmake ..
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The binary is installed under &lt;code&gt;/usr/local/bin&lt;/code&gt; and you can use it under the uThreads directory as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/samanbarghi/uThreads
cd uThreads
cpp2c include/uThreads.h -- -I./src -std=c++11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cpp2c&lt;/code&gt; creates two files &lt;code&gt;cwrapper.h&lt;/code&gt; and &lt;code&gt;cwrapper.cpp&lt;/code&gt; that holds the generated C interface. You can find the generated file &lt;a href=&#34;https://github.com/samanbarghi/CPP2C/tree/master/output&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another issue with current approach is in cases where there is no public constructor (e.g., uThread class does not have a public constructor and uThread instances are created using uThreads::create function) the content of the constructor is going to be wrong and need to be updated. A possible fix that can further improve the current approach is to annotate the C++ source code with the intended C interface, and in cases the annotation is used simply use the annotation instead of generating the function.&lt;/p&gt;

&lt;p&gt;Although the C interface generator still has some shortcomings when it comes to return types, dealing with template functions and out of uThreads classes, this practice shows the potential of using such approach to automate the generation of C interfaces from C++ source code, specially for large projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>http://samanbarghi.com/projects/</link>
      <pubDate>Tue, 20 Sep 2016 00:27:47 -0400</pubDate>
      
      <guid>http://samanbarghi.com/projects/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://samanbarghi.com/sher-negar&#34;&gt;Sher-negar&lt;/a&gt;: Persian poem illustrator
developed by Angularjs and Raphaeljs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/samanbarghi/MPSCQ&#34;&gt;MPSCQ&lt;/a&gt;: lock-free, multi-producer
single consumer queue in C++&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/samanbarghi/uThreads&#34;&gt;uThreads&lt;/a&gt;: Concurrent threading
library in C++ based on lightweight threads (fibers) that supprots M:N mapping&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/samanbarghi/ngphotodownloader&#34;&gt;ngphotodownloader&lt;/a&gt;: Simple
bash script to download National Geographic photo of the day in Linux&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://samanbarghi.com/about/</link>
      <pubDate>Tue, 08 Dec 2015 02:09:03 -0500</pubDate>
      
      <guid>http://samanbarghi.com/about/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignleft&#34; style=&#34;margin-right: 30px;margin-bottom: 20px;&#34; title=&#34;Saman Barghi&#34; alt=&#34;Saman Barghi&#34; src=&#34;http://samanbarghi.com/images/saman_handstand.jpg&#34; width=&#34;300&#34;  align=&#34;left&#34; /&gt;
Saman Barghi is currently a PhD student of Computer Science at University of Waterloo. He is currently researching on concurrent and parallel programming models, specially for highly scalable network servers. He is trying to find a sweet spot between thread-based programming model and event-driven model; this model will use various hardware characteristics and stage driven model to provide an scalable alternative to current available models. Currently, he is developing a user thread library in C++ that supports x86_64 machines and can provide a &lt;strong&gt;M:N&lt;/strong&gt; threading model on Linux.&lt;/p&gt;

&lt;p&gt;He is also a full stack developer, interested in learning new technologies, and
apply them to create interesting products. He believe that learning any new
technology should not take more than a month to master, and believes investing
time in choosing the right tools and come up with a good design in the beginning
will translate to saving time in the future; if one do not get stuck
in that process forever.&lt;/p&gt;

&lt;p&gt;He is a calisthenics addict and dedicates some time in his schedule to build strength and reach
his goals. He believes a healthy diet and following a workout routine to reach
predefined goals will translate to developing strength, increasing health and
energy and helping you stay sharp and focused. He is also and adventurer, love
outdoors and nature.&lt;/p&gt;

&lt;p&gt;Saman is always have a book close by, and is interested in subjects such as
behavioural economics, business building, personal growth, how brain works and
human interactions. He believes that not also gathering knowledge is essential to change your
point of view towards the world around you and to shine some light on the dark corners
of your mind, but also using his knowledge in day to day life towards
creating a better environment for himself and other human beings is what should
result from that knowledge. He is also interested in reading fiction, and
believes a good fiction will make the reader think, and make him live the life
of others and spend moments in their shoes, and will result in personal growth.&lt;/p&gt;

&lt;p&gt;He is also play the guitar and paints with acrylic in his free time. He
believes in building a skill set in one dimension (Computer Science), and occasionally touching other
dimensions, specially art, to be able to view the world through that window. He
always tries to keep an open mind regarding the subjects around him, and
reevaluate his believes and ideas frequently.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to wrap a system call (libc function) in Linux</title>
      <link>http://samanbarghi.com/blog/2014/09/05/how-to-wrap-a-system-call-libc-function-in-linux/</link>
      <pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/blog/2014/09/05/how-to-wrap-a-system-call-libc-function-in-linux/</guid>
      <description>

&lt;p&gt;For one of my research projects I had to wrap linux system calls and redirect
them to another thread. In Linux system calls are not invoked directly, but
rather via wrapper functions in
glibc[&lt;a href=&#34;http://man7.org/linux/man-pages/man2/syscalls.2.html&#34;&gt;man 2 syscalls&lt;/a&gt;]. The glibc
wrapper is only copying arguments and unique system call number to the registers
where the kernel expects them, then trapping to kernel mode and setting the
errno if the system call returns an error number [&lt;a href=&#34;http://man7.org/linux/man-pages/man2/intro.2.html&#34;&gt;man 2 intro&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;It is possible to invoke system calls directly by using syscall [&lt;a href=&#34;http://man7.org/linux/man-pages/man2/syscall.2.html&#34;&gt;man 2 syscall&lt;/a&gt;]. But since most programs will rely on glibc functions for system calls, it will be enough to wrap those functions. There are two ways to wrap or override C functions in Linux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using LD_PRELOAD:&lt;/strong&gt; There is a shell environment variable in Linux called
&lt;em&gt;LD_PRELOAD&lt;/em&gt;, which can be set to a path of a shared library, and that library
will be loaded before any other library (including glibc).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using &amp;lsquo;ld --wrap=&lt;em&gt;symbol&lt;/em&gt;&amp;lsquo;:&lt;/strong&gt; This can be used to use a wrapper function
for &lt;em&gt;symbol&lt;/em&gt;. Any further reference to &lt;em&gt;symbol&lt;/em&gt; will be resolved to the
wrapper function. [&lt;a href=&#34;http://man7.org/linux/man-pages/man1/ld.1.html&#34;&gt;man 1 ld&lt;/a&gt;].&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I explain each approach later, but first lets write a very simple test file.
I plan to wrap &lt;em&gt;write&lt;/em&gt; system call and count the total number of characters that
is being written out.&lt;/p&gt;

&lt;h3 id=&#34;test-file:a3553a81da01374026bea81262624115&#34;&gt;Test file&lt;/h3&gt;

&lt;p&gt;Lets write a very simple test file that calls &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;printf&lt;/em&gt; to write to standard output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
    write(0, &amp;quot;Hello, Kernel!\n&amp;quot;, 15);
    printf(&amp;quot;Hello, World!\n&amp;quot;);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I run the code I get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./bin/test
Hello, Kernel!
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I want to see what are the system calls that are being called when running the test file. I use &lt;em&gt;strace&lt;/em&gt; to see the system calls responsible for writting to the standard output. &lt;em&gt;strace&lt;/em&gt; is being used to trace system calls and signals. Here is the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execve(&amp;quot;./bin/test&amp;quot;, [&amp;quot;./bin/test&amp;quot;], [/* 53 vars */]) = 0
brk(0)                                  = 0x2532000
access(&amp;quot;/etc/ld.so.nohwcap&amp;quot;, F_OK)      = -1 ENOENT (No such file or directory)
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f099cc04000
access(&amp;quot;/etc/ld.so.preload&amp;quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&amp;quot;/etc/ld.so.cache&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=128624, ...}) = 0
mmap(NULL, 128624, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f099cbe4000
close(3)                                = 0
access(&amp;quot;/etc/ld.so.nohwcap&amp;quot;, F_OK)      = -1 ENOENT (No such file or directory)
open(&amp;quot;/lib/x86_64-linux-gnu/libc.so.6&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
read(3, &amp;quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&amp;gt;\0\1\0\0\0\320\37\2\0\0\0\0\0&amp;quot;..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=1845024, ...}) = 0
mmap(NULL, 3953344, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f099c61e000
mprotect(0x7f099c7d9000, 2097152, PROT_NONE) = 0
mmap(0x7f099c9d9000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1bb000) = 0x7f099c9d9000
mmap(0x7f099c9df000, 17088, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f099c9df000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f099cbe3000
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f099cbe1000
arch_prctl(ARCH_SET_FS, 0x7f099cbe1740) = 0
mprotect(0x7f099c9d9000, 16384, PROT_READ) = 0
mprotect(0x600000, 4096, PROT_READ)     = 0
mprotect(0x7f099cc06000, 4096, PROT_READ) = 0
munmap(0x7f099cbe4000, 128624)          = 0
write(0, &amp;quot;Hello, Kernel!\n&amp;quot;, 15Hello, Kernel!)        = 15
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 3), ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f099cc03000
write(1, &amp;quot;Hello, World!\n&amp;quot;, 14Hello, World!)         = 14
exit_group(0)                           = ?
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see lines 26 and 29 are where the &lt;em&gt;write&lt;/em&gt; system call related to our
code is being called. Since our goal is to wrap glibc functions, lets check
output of &lt;em&gt;ltrace&lt;/em&gt; as well. &lt;em&gt;ltrace&lt;/em&gt; intercepts and records the dynamic library
calls which are called by the executed process [&lt;a href=&#34;http://man7.org/linux/man-pages/man1/ltrace.1.html&#34;&gt;man 1 ltrace&lt;/a&gt;]. Here is the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__libc_start_main(0x40057d, 1, 0x7fffdd1ec628, 0x4005b0 &amp;lt;unfinished ...&amp;gt;
write(0, &amp;quot;Hello, Kernel!\n&amp;quot;, 15Hello, Kernel!
)                                          = 15
puts(&amp;quot;Hello, World!&amp;quot;Hello, World!)         = 14
+++ exited (status 0) +++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;ltrace&lt;/em&gt; result shows that the &lt;em&gt;write&lt;/em&gt; function in the code is calling the
&lt;em&gt;write&lt;/em&gt; function from glibc, but &lt;em&gt;printf&lt;/em&gt; is calling &lt;em&gt;puts&lt;/em&gt; from glibc. So we
should be careful here, overriding only the &lt;em&gt;write&lt;/em&gt; function from glibc will not
cause the &lt;em&gt;write&lt;/em&gt; system call from &lt;em&gt;printf&lt;/em&gt; to be wrapped. We need to
differentiate between the final system call and the glibc library call. So in
order to cover both of the cases, I need to override &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;puts&lt;/em&gt;
functions. Now lets jump into wrapping these functions.&lt;/p&gt;

&lt;h2 id=&#34;using-ld-preload:a3553a81da01374026bea81262624115&#34;&gt;Using LD_PRELOAD&lt;/h2&gt;

&lt;p&gt;LD_PRELOAD allows a shared library to be loaded before any other libraries. So
all I need to do is to write a shared library that overrides &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;puts&lt;/em&gt;
functions. If we wrap these functions, we need a way to call the real functions
to perform the system call. &lt;em&gt;dlsym&lt;/em&gt; just do that for us [&lt;a href=&#34;http://man7.org/linux/man-pages/man3/dlsym.3.html&#34;&gt;man 3 dlsym&lt;/a&gt;]:
&amp;gt; The function dlsym() takes a &amp;ldquo;handle&amp;rdquo; of a dynamic library returned
       by dlopen() and the null-terminated symbol name, returning the
       address where that symbol is loaded into memory.  If the symbol is
       not found, in the specified library or any of the libraries that were
       automatically loaded by dlopen() when that library was loaded,
       dlsym() returns NULL&amp;hellip;&lt;/p&gt;

&lt;p&gt;So inside the wrapper function we can use dlsym to get the address of the related symbol in memory and call the glibc function. Another approach can be calling the syscall directly, both approaches will work. Here is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define _GNU_SOURCE
#include &amp;lt;dlfcn.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

/* Function pointers to hold the value of the glibc functions */
static  ssize_t (*real_write)(int fd, const void *buf, size_t count) = NULL;
static int (*real_puts)(const char* str) = NULL;

/* wrapping write function call */
ssize_t write(int fd, const void *buf, size_t count)
{

    /* printing out the number of characters */
    printf(&amp;quot;write:chars#:%lu\n&amp;quot;, count);
    /* reslove the real write function from glibc
     * and pass the arguments.
     */
    real_write = dlsym(RTLD_NEXT, &amp;quot;write&amp;quot;);
    real_write(fd, buf, count);

}

int puts(const char* str)
{

    /* printing out the number of characters */
    printf(&amp;quot;puts:chars#:%lu\n&amp;quot;, strlen(str));
    /* resolve the real puts function from glibc
     * and pass the arguments.
     */
    real_puts = dlsym(RTLD_NEXT, &amp;quot;puts&amp;quot;);
    real_puts(str);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We first declare pointers to hold the value of the glibc functions, we will use these later to get the pointer from &lt;em&gt;dlsym&lt;/em&gt;. Then we simply implement the glibc functions that we want to wrap, add our code and finally call the real function to perform the intended task.&lt;/p&gt;

&lt;h4 id=&#34;compiling-the-shared-library:a3553a81da01374026bea81262624115&#34;&gt;Compiling the shared library&lt;/h4&gt;

&lt;p&gt;We compile the shared library as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -fPIC -shared  -o bin/libpreload.so src/wrap-preload.c -ldl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to make sure we are generating a position-independent code(PIC) by passing &lt;code&gt;-fPIC&lt;/code&gt; that is shared &lt;code&gt;-shared&lt;/code&gt;. We also need to link our library with Dynamically Loaded (DL) libraries &lt;code&gt;-ldl&lt;/code&gt;, since we are using dlsym in our code.&lt;/p&gt;

&lt;p&gt;To run our test code and wrap glibc functions, we simply set &lt;code&gt;LD_PRELOAD&lt;/code&gt; enviornment variable to the generated shared object file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ LD_PRELOAD=/home/saman/Programming/wrap-syscall/bin/libpreload.so ./bin/test
write:chars#:15
Hello, Kernel!
puts:chars#:13
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;LD_PRELOAD&lt;/code&gt; loads the libpreload.so library before the execution of our code, and thus calling &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;puts&lt;/em&gt; will call our wrapper functions inside the library.&lt;/p&gt;

&lt;h2 id=&#34;using-ld-wrap-symbol:a3553a81da01374026bea81262624115&#34;&gt;Using &lt;em&gt;ld --wrap=symbol&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Another way of wrapping functions is by using linker at the link time. GNU linker provides an option to wrap a function for a symbol [&lt;a href=&#34;http://man7.org/linux/man-pages/man1/ld.1.html&#34;&gt;man 1 ld&lt;/a&gt;]:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use a wrapper function for symbol.  Any undefined reference to
           symbol will be resolved to &amp;ldquo;&lt;strong&gt;wrap_symbol&amp;rdquo;.  Any undefined
           reference to &amp;ldquo;&lt;/strong&gt;real_symbol&amp;rdquo; will be resolved to symbol.&lt;/p&gt;

&lt;p&gt;This can be used to provide a wrapper for a system function.  The
           wrapper function should be called &amp;ldquo;&lt;strong&gt;wrap_symbol&amp;rdquo;.  If it wishes
           to call the system function, it should call &amp;ldquo;&lt;/strong&gt;real_symbol&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Here is a trivial example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   void *
   __wrap_malloc (size_t c)
   {
    printf (&amp;quot;malloc called with %zu\n&amp;quot;, c);
    return __real_malloc (c);
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you link other code with this file using &amp;ndash;wrap malloc, then
    all calls to &amp;ldquo;malloc&amp;rdquo; will call the function &amp;ldquo;&lt;strong&gt;wrap_malloc&amp;rdquo;
    instead.  The call to &amp;ldquo;&lt;/strong&gt;real_malloc&amp;rdquo; in &amp;ldquo;__wrap_malloc&amp;rdquo; will
    call the real &amp;ldquo;malloc&amp;rdquo; function.&lt;/p&gt;

&lt;p&gt;You may wish to provide a &amp;ldquo;&lt;strong&gt;real_malloc&amp;rdquo; function as well, so
    that links without the &amp;ndash;wrap option will succeed.  If you do
    this, you should not put the definition of &amp;ldquo;&lt;/strong&gt;real_malloc&amp;rdquo; in the
    same file as &amp;ldquo;__wrap_malloc&amp;rdquo;; if you do, the assembler may
    resolve the call before the linker has a chance to wrap it to
    &amp;ldquo;malloc&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on the description, we need to implement two function &lt;code&gt;__real_symbol&lt;/code&gt; and &lt;code&gt;__wrap_symbol&lt;/code&gt; (in our case &lt;code&gt;__real_write&lt;/code&gt; and &lt;code&gt;__wrap_write&lt;/code&gt;), and link the application with our code. Here is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

/* create pointers for real glibc functions */
ssize_t __real_write(int fd, const void *buf, size_t count);
int __real_puts(const char* str);


/* wrapping write function */


ssize_t __wrap_write (int fd, const void *buf, size_t count)
{
    /* printing out the number of characters */
    printf(&amp;quot;write:chars#:%lu\n&amp;quot;, count);

    /* call the real glibc function and return the result */
    ssize_t result = __real_write(fd, buf, count);
    return result;
}

/* wrapping puts function */
int __wrap_puts (const char* str)
{
    /* printing out the number of characters */
    printf(&amp;quot;puts:chars#:%lu\n&amp;quot;, strlen(str));

    /* call the real glibc function and return the result */
    int result = __real_puts(str);
    return result;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is very straight forward, but now lets try to compile the code and link it with our test application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -c src/wrap-link.c -o bin/wrap-link.o
gcc -c src/test.c -o bin/test-link.o
gcc -Wl,-wrap,write -Wl,-wrap=write -Wl,-wrap=puts bin/test-link.o bin/wrap-link.o -o bin/test-link-bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used &lt;em&gt;gcc&lt;/em&gt; to pass the option to the linker with &lt;code&gt;-Wl&lt;/code&gt;, which is equal to calling &lt;code&gt;ld&lt;/code&gt; with &lt;code&gt;--wrap&lt;/code&gt; option. Now if I run the code I get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./bin/test-link-bin
write:chars#:15
Hello, Kernel!
puts:chars#:13
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:a3553a81da01374026bea81262624115&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In order to wrap system calls in Linux, one have to wrap related glibc function calls. You have to be careful about the type of system calls you are tryting to override, since various functions might call different functions from glibc, e.g. &lt;em&gt;printf&lt;/em&gt; calls &lt;em&gt;puts&lt;/em&gt; from glibc which calls &lt;em&gt;write&lt;/em&gt; at the end.&lt;/p&gt;

&lt;p&gt;There are two ways to do this: 1-Using &lt;code&gt;LD_PRELOAD&lt;/code&gt; environment variable, 2-using &lt;code&gt;ld --wrap&lt;/code&gt;. I personally prefer the first approach since if the number of wrapper functions increases I do not have to specify them one by one, as in the second case.&lt;/p&gt;

&lt;p&gt;You can find the source code and the related Makefile in the following github repository: &lt;a href=&#34;wrap-syscall&#34;&gt;https://github.com/samanbarghi/wrap-syscall&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>National Geographic Photo of the day Downloader for Linux</title>
      <link>http://samanbarghi.com/2012/08/29/national-geographic-photo-of-the-day-downloader-for-linux</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2012/08/29/national-geographic-photo-of-the-day-downloader-for-linux</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://samanbarghi.com/images/ngh-photo.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;National Geographic&amp;#39;s Photo Of the Day&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I am a fan of National Geographic photos on their site, and I also get bored of by my desktop background after a while. So I decided to create a script to download National Geographic photo of the day, and using it as my desktop background. I am using it over Gnome3 (I am using Fedora as I think it&amp;#8217;s more stable than Ubuntu, and I like Gnome3 way better than Unity), but if you are a Unity user it should work for you as well. You can find the script here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a title=&#34;https://github.com/samanbarghi/ngphotodownloader&#34; href=&#34;https://github.com/samanbarghi/ngphotodownloader&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/samanbarghi/ngphotodownloader&#34;&gt;https://github.com/samanbarghi/ngphotodownloader&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although National Geographic posts a photo everyday, not all the photos come with a high quality format. So the script checks whether a wallpaper format exists or not. If so, it downloads the photo into the same directory the script resides.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;setup:2322363d5b3491b8421298be27f8697e&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;All you need to do is  create a directory for your wallpaper and put the script in there, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Pictures/
git clone https://github.com/samanbarghi/ngphotodownloader.git NGWallpapers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply run the script to get the Photo of the day. But doing that manually everyday is not fun. Here cron comes handy. You need to run the script at least once each day, to automate the process you can use cron to download the script and set it as your desktop background:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 12 * * * sh /home/yourusername/Pictures/NGWallpapers/ngwallpaper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case since I am running the script on my laptop, and my laptop is not always on; I call the script every 3 hours to make sure it runs at least once each day. Don&amp;#8217;t worry about duplicates, the script will not download the image if it already exists in the directory. The overhead of the script on cpu/memory/network is negligible, so don&amp;#8217;t worry about calling the script 8 times a day:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00 */3 * * * sh /home/yourusername/Pictures/NGWallpapers/ngwallpaper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy! &lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Might My Resume look Like If I Were a Computer !?</title>
      <link>http://samanbarghi.com/2012/05/21/what-might-my-resume-look-like-if-i-were-a-computer</link>
      <pubDate>Mon, 21 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2012/05/21/what-might-my-resume-look-like-if-i-were-a-computer</guid>
      <description>

&lt;p&gt;The other day I was about to update my resume, and this crazy question came to my mind:
&lt;strong&gt;What might my resume look like if I were a computer ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And &lt;a href=&#34;http://samanbarghi.com/memresume/&#34;&gt;This is the result.&lt;/a&gt; (Best viewed in Chrome and Firefox).&lt;/p&gt;

&lt;p&gt;Well, I am aware that I would not wake up one morning finding out I turned into a computer. Also, I am not sure if one day I turn into a computer, I would look for a job. It is not unexpected that someday robots apply for jobs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am an intel-based robot with 128 cores, 2 extra GPUs and lots and lots of storage. Great at multi-tasking, equipped with state of the art AI technologies; can adapt to any environment and a quick learner. I also have teleportation abilities, but the module is missing so you have to buy the module and train me to do that. Originally designed to compose and play music, but I also can cook, clean and do programming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;here-is-how-i-came-up-with-me-as-a-computer-resume-memresume:4b9a2f0cc21d2fa557cbbde11ed224e0&#34;&gt;Here is how I came up with &lt;a href=&#34;http://samanbarghi.com/memresume/&#34;&gt;me as a computer resume&lt;/a&gt;:&lt;/h2&gt;

&lt;p&gt;Lets see how a computer do it&amp;#8217;s job from inside out. In the heart of the computer, there lays CPU which does most of the hard work and it defines the base characteristics of the system. Frequency, Processing units, Registers, Memory management, and etc. If I were a computer, I would ask myself: What are my core features that are defining my characteristics? In human world, it translates to very basic human characteristics and personality. Being a team player, public speaker, GTD type of person, Introvert, active, passive, and so on. Basically, I question the way I define myself. This will be the core of the system.&lt;/p&gt;

&lt;p&gt;In addition, one important part of the computer systems is the [memory hierarchy][1]. to simplify things, lets assume memory hierarchy only consists of Hard Drive, RAM and processor caches (L1, L2 and L3) . Each core has access to all these memory elements, and the difference is the time it takes for the core to access each of them. At the very top of the hierarchy we have Level 1 Cache (L1), which has a very fast access time but it comes in very small size. As we move down the hierarchy (L2 -&amp;gt; L3 -&amp;gt; RAM), the access time gets longer and the size of the memory becomes bigger. It means the lower the memory element is in the hierarchy, the more time CPU has to spend to fetch the data from that element.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://samanbarghi.com/images/ComputerMemoryHierarchy.svg&#34; alt=&#34;Memory Hierarchy&#34; /&gt;
But how does this all work together? Well there is a concept called temporal locality (also there exists Spatial Locality which is not related to me being a computer !!), it means the most recent data being used at a certain point in time should be closer to the core of the system. Because this data will most probably be used in the near future. So recently used data can be accessed faster, and since most probably it will be accessed in the near future again, it makes the system works faster by removing the accessing cost to that data. For it to work, the CPU moves the data it needs to access at a certain point in time from RAM to each cache level based on recency of the data. So data in L1 is being served at the moment, and data in L3 has been accessed a while ago.&lt;/p&gt;

&lt;p&gt;If we look closely, the same concept applies in our lives. In my case, there are skills and programming languages which I am actively using right now in various projects. The cost of accessing those skills for me is almost zero (My L1 cache as a computer). However, there are a couple of programming languages and technologies that I am using along with L1 skills and they are being accessed frequently as well. The cost to activate those skills is very small but not zero. There are also some programming languages I used during the past years, or I have played with them a while ago, and the price of activating them for me will be to read some documents, write some sample programs and it takes time for me to get comfortable with them again. Those stuff fits into my L3 cache. RAM normally holds the data related to the processes running in a CPU, and in human world I translate them to the general skills that are in there and can be loaded to caches anytime. Web development, mobile app development, these are general info that float in my RAM ! I talk about the hard drive in a bit.&lt;/p&gt;

&lt;p&gt;Well of course without the mainboard, all of these are nothing. CPU and RAM attach to the mainboard, and the mainboard provides the connectors for various parts. It connects the CPU to RAM, Hard Drive and all other devices. CPU also gets all its power from the mainboard. Mainboard basically provides support for the rest of the system. In human world, we can ask ourselves, which one of our features provides support for what we already put in our CPU and Memory? My answer was: achievements. Achievements can be education, work experiences, projects, and awards. These achievements connects the person who is reviewing our resume to the skills in our memory, or personality in our CPU.&lt;/p&gt;

&lt;p&gt;Another device that attaches to the mainboard, is hard drive. Hard drive is for storing a whole bunch of data, and it&amp;#8217;s external to the mainboard. Photos, Videos, Documents and programs reside in the Hard Drive. There are various types of data in the hard-drive, but not all are related to the job I (as a computer) am applying for. The whole system has already loaded what is required for a job in the RAM and caches. What left is all other none-related data, which can be loaded at the times I am not applying for jobs or doing a job ! In human world, I say all the interests, hobbies, and activities that are not related to their jobs are stored in the hard drive. Although, this is not related to the job itself, but it can demonstrate how interesting a person is.&lt;/p&gt;

&lt;p&gt;I applied the rules above to myself and came up with &lt;a href=&#34;http://samanbarghi.com/memresume/&#34;&gt;me as a computer resume&lt;/a&gt;. If someone take a look at this resume, by one look they know if they are interested in what I am doing or not. So the real question is not whether one day I turn into a computer or not, it is why in 21st century most resumes are still flat lists and lack a specific hierarchy? I would be bored looking at hundreds of flat listed resumes each having pages and pages of information, I would be happy to hear from other peoples&amp;#8217;s point of view? Although there are some really creative resume designs out there, what would be your suggestion to change the way most people present their resume !? What would your resume look like if you wanted to think out of the box!? What type of info helps HR and hiring staff evaluate a resume better? is there any research going on this subject?&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&#34;http://en.wikipedia.org/wiki/Memory_hierarchy&#34;&gt;http://en.wikipedia.org/wiki/Memory_hierarchy&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mercurial on Bluehost</title>
      <link>http://samanbarghi.com/2011/08/26/mercurial-on-bluehost</link>
      <pubDate>Fri, 26 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2011/08/26/mercurial-on-bluehost</guid>
      <description>&lt;p style=&#34;text-align: left;&#34;&gt;
  I had to install a mercurial repository on bluehost for one of my projects. The good thing about mercurial is that it allows you to access your repository through http, and it is an ideal version control system for shared hosts. I googled around for it, and I found a couple of instructions available (&lt;a href=&#34;http://bugtracker.gttools.com/public/wiki/bluehost/Mercurial&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;http://gttools.com/bluehost-setup/mercurial-and-trac-setup-on-bluehost&#34;&gt;this&lt;/a&gt;). But they are outdated, and probably worked with earlier versions of mercurial. So I decided to rewrite the instruction of installing mercurial on your shared host (specifically bluehost):
&lt;/p&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  &lt;span style=&#34;text-align: -webkit-auto;&#34;&gt;Update your bash profile, add/modify these 3 lines:&lt;/span&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim ~/.bash_profile
export LD_LIBRARY_PATH=”$HOME/packages/lib:$LD_LIBRARY_PATH”
export PYTHONPATH=”$HOME/packages/lib/python2.3/site-packages:$PYTHONPATH”
export PATH=”$HOME/packages/bin:$HOME/bin:$PATH”
source ~/.bash_profile
vim ~/.bashrc
PATH=$PATH:$HOME/bin:$HOME/packages/mercurial
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create folders (Please note, from now on my assumption is that your web directory is located at $HOME/public_html, please change the related parts if your configuration is different):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd
mkdir install_files
mkdir packages
mkdir ~/public_html/hg
mkdir ~/public_html/hg/repos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get Mercurial and install:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/packages
wget http://selenic.com/repo/hg-stable/archive/tip.tar.gz
tar zxf tip.tar.gz
mv tip.tar.gz ~/install_files/
mv Mercurial* mercurial
cd mercurial
#dont&#39; forget to change the username
echo -e &amp;quot;[ui]\nusername=YOURUSERNAME &amp;amp;lt;YOUREMAIL@WEB.com&amp;amp;gt;&amp;quot; &amp;amp;gt; ~/.hgrc﻿
make local
./hg debuginstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the last command should not show any problems and you would see :&lt;span style=&#34;font-family: Consolas, Monaco, &#39;Courier New&#39;, Courier, monospace; font-size: 12px; line-height: 18px; white-space: pre;&#34;&gt; &lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Checking encoding (UTF-8)...
Checking installed modules (~/packages/mercurial/mercurial)...
Checking templates...
Checking commit editor...
Checking username...
No problems detected
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to be able to push, mercurial provides a cgi script(hgweb.cgi) to handle push commands (&lt;a href=&#34;http://mercurial.selenic.com/wiki/PublishingRepositories#hgweb&#34;&gt;http://mercurial.selenic.com/wiki/PublishingRepositories#hgweb&lt;/a&gt;). In addition, there is a need for apache authentication module to perform the authentication tasks and manage accesses to our repository. Before, we can use the repository we need to copy the hgweb.cgi script to our web directory, and customize it afterwards:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed &#39;s|#import sys|import sys|g;s|/path/to/python/lib|&#39;$HOME&#39;/packages/mercurial|g;s|/path/to/repo/or/config|&#39;$HOME&#39;/public_html/hg/hgweb.config|g&#39; ~/packages/mercurial/hgweb.cgi &amp;amp;gt; $HOME/public_html/hg/hgweb.cgi
chmod 755 ~/public_html/hg/hgweb.cgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create hgweb.config file. You can use *[collections] *instead of &lt;em&gt;[paths]&lt;/em&gt; here, it depends on your personal taste. [Here][1] suggested to use paths instead of collection. So if you prefer to use &lt;em&gt;[collections]&lt;/em&gt; instead, do not forget to remove all the lines related to hgweb.config when you initialize your repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo [web] &amp;amp;gt; ~/public_html/hg/hgweb.config
echo allowpull=true &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/hgweb.config
echo [paths] &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/hgweb.config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create .htaccess file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;Options +ExecCGI&#39; &amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;RewriteEngine On&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;RewriteBase /hg&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;RewriteRule ^$ hgweb.cgi [L]&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;RewriteCond %{REQUEST_FILENAME} !-f&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;RewriteCond %{REQUEST_FILENAME} !-d&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;RewriteRule (.*) hgweb.cgi/$1 [QSA,L]&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;AuthUserFile /home/&#39;$USER&#39;/etc/hg-basic-auth&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;AuthName &amp;quot;HG Repositories&amp;quot;&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;AuthType Basic&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
echo &#39;Require valid-user&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/.htaccess
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create Passwd files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd
htpasswd -b -c -d ~/etc/hg-basic-auth HgUserName PASSWORD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For extra users:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;htpasswd -b -d ~/etc/hg-basic-auth HgUserNameExtra PASSWORD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initialize repositories (Do not forget to change all instances of PROJECT to your own project name):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/public_html/hg/repos
~/packages/mercurial/hg init PROJECT
echo &#39;PROJECT = &#39;$HOME&#39;/public_html/hg/repos/PROJECT&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/hgweb.config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For extra projects :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/packages/mercurial/hg init ExtraPROJECT
echo &#39;ExtraPROJECT  = &#39;$HOME&#39;/public_html/hg/repos/ExtraPROJECT&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/hgweb.config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets create hgrc files for each project :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;[web]&#39; &amp;amp;gt; ~/public_html/hg/repos/PROJECT/.hg/hgrc
echo &#39;contact=admin email address&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/repos/PROJECT/.hg/hgrc
echo &#39;description=My releases&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/repos/PROJECT/.hg/hgrc
echo &#39;allow_push=USER1, USERn&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/repos/PROJECT/.hg/hgrc
echo &#39;allow_archive=zip&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/repos/PROJECT/.hg/hgrc
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, pushing is only allowed via HTTPS. To permit HTTP pushing you have to add this to your repository&amp;#8217;s &lt;tt&gt;.hg/hgrc&lt;/tt&gt; file (or your Web server user&amp;#8217;s &lt;tt&gt;.hgrc&lt;/tt&gt; file, such as&lt;tt&gt;/home/www-data/.hgrc&lt;/tt&gt;, or a system-wide &lt;tt&gt;hgrc&lt;/tt&gt; file like &lt;tt&gt;/etc/mercurial/hgrc&lt;/tt&gt;):&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I personally decided to put this in the hgrc file in my repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;push_ssl = false&#39; &amp;amp;gt;&amp;amp;gt; ~/public_html/hg/repos/PROJECT/.hgrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are basically done. You can access your repository using :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hg clone http://yourdomain.com/hg/PROJECT

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class=&#39;st\_facebook&#39; st\_title=&#39;Mercurial on Bluehost&#39; st_url=&#39;http://www.samanbarghi.com/2011/08/26/mercurial-on-bluehost/&#39;&gt;&lt;/span&gt;&lt;span st\_via=&#39;saman\_b&#39; class=&#39;st\_twitter&#39; st\_title=&#39;Mercurial on Bluehost&#39; st_url=&#39;http://www.samanbarghi.com/2011/08/26/mercurial-on-bluehost/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_email&#39; st\_title=&#39;Mercurial on Bluehost&#39; st_url=&#39;http://www.samanbarghi.com/2011/08/26/mercurial-on-bluehost/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_sharethis&#39; st\_title=&#39;Mercurial on Bluehost&#39; st_url=&#39;http://www.samanbarghi.com/2011/08/26/mercurial-on-bluehost/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_fblike&#39; st\_title=&#39;Mercurial on Bluehost&#39; st_url=&#39;http://www.samanbarghi.com/2011/08/26/mercurial-on-bluehost/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_plusone&#39; st\_title=&#39;Mercurial on Bluehost&#39; st_url=&#39;http://www.samanbarghi.com/2011/08/26/mercurial-on-bluehost/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_pinterest&#39; st\_title=&#39;Mercurial on Bluehost&#39; st_url=&#39;http://www.samanbarghi.com/2011/08/26/mercurial-on-bluehost/&#39;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&#34;http://mercurial.selenic.com/wiki/PublishingRepositories#Configuration_of_hgweb&#34;&gt;http://mercurial.selenic.com/wiki/PublishingRepositories#Configuration_of_hgweb&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH to VirtualBox 3 FreeBsd Guests</title>
      <link>http://samanbarghi.com/2011/02/04/ssh-to-virtualbox-3-freebsd-guests</link>
      <pubDate>Fri, 04 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2011/02/04/ssh-to-virtualbox-3-freebsd-guests</guid>
      <description>&lt;p&gt;This post is based on &lt;a href=&#34;http://muffinresearch.co.uk/archives/2010/02/08/howto-ssh-into-virtualbox-3-linux-guests/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Howto: SSH into VirtualBox 3 Linux Guests&amp;#8221;&lt;/a&gt; by &lt;a href=&#34;http://muffinresearch.co.uk/&#34; target=&#34;_blank&#34;&gt;Stuart Colville&lt;/a&gt;, which I have updated to work for FreeBSD Guests: In older versions of VirtualBox one had to use a bridge interface to make this work. However, in newer versions; a virtual interface can be added to the Host by default, which make it way easier to access the guest machine through the host.&lt;/p&gt;

&lt;p&gt;Usually, you have a primary network interface which uses NAT adapter, that one is needed for connecting to the Internet. What we are going to do is to add an additional interface to the guest machine. All you have to do is to access the settings of the guest when it is off.  Select Network-&amp;gt;Adapter 2, then check the &amp;#8220;Enable Network Adapter&amp;#8221; as shown below. Change &amp;#8220;attached to&amp;#8221; to &amp;#8220;Host-only Adapter&amp;#8221; this will have the name vboxnet0 by default.&lt;/p&gt;

&lt;p&gt;Now if you do &lt;em&gt;ifconfing&lt;/em&gt; on your host machine (On Windows hosts use &lt;em&gt;ipconfig&lt;/em&gt;), there will be a new interface called *vboxnet0 *(same as the virtual adapter name you just added). You will notice the IP address is something similar to this:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;inet addr:192.168.56.1  Bcast:192.168.56.255  Mask:255.255.255.0&lt;/pre&gt;

&lt;p&gt;Which means his interface can access all the IP addresses in the following range: &lt;em&gt;192.168.56.1-192.168.56.254&lt;/em&gt;. This is needed to setup the guest interface properly.&lt;/p&gt;

&lt;p&gt;Now, boot the FreeBsd guest. If you do *ifconfig &lt;em&gt;on your guest machine&lt;/em&gt;, *You will notice that a second interface has been added to your machine (The name is *em1 *if you already had one interface). You have to configure the new interface; so you can access it by your host machine. We will set a static IP address for this interface using the IP range above.&lt;/p&gt;

&lt;p&gt;Next add the following lines to &lt;em&gt;&amp;#8220;/etc/rc.conf&amp;#8221;&lt;/em&gt; in your guest machine:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;ifconfig_em1=&#34;inet 192.168.56.10 netmask 255.255.255.0&#34;
&lt;/pre&gt;

&lt;p&gt;Save this and run the following command to restart the network interfaces:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;/etc/rc.d/netif restart &lt;/pre&gt;

&lt;p&gt;If you have not enabled SSH on your FreeBsd guest yet, edit &lt;em&gt;/etc/rc.conf&lt;/em&gt; and add the following:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;sshd_enable=&#34;YES&#34; &lt;/pre&gt;

&lt;p&gt;and then run:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;/etc/rc.d/sshd start &lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s it, now you should be able to ssh to your guest machine by:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;ssh saman@192.168.56.10 &lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Some Notes on Facebook Hacker Cup Qualification Round</title>
      <link>http://samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round</link>
      <pubDate>Tue, 11 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round</guid>
      <description>&lt;p&gt;Monday, January 10 was the last day to submit your answers to get qualified for Facebook Hacker Cup. It started from January 7, and lasted for 3 days. There were three problems presented on the competition website, to be solved by participants. Problems were provided with sample input and output, and there were no time limits to browse through the problems and to develop your code. To answer each problem, competitors had to download an input and submit their output, yet they only had 6 minutes, after they downloaded the input, to submit their answers through the form provided. There were absolutely no limitations on choosing the programming language (I used Perl), nor on the way you code your solution, cause there were no need to upload your source code. All three problems were fairly easy to solve, except one (called the peg game), that was not explained clearly. Anyone who solve at least one problem, would be qualified for the first round.&lt;/p&gt;

&lt;p&gt;This competition could attract a fairly large number of young people around the world, and by that means, it can be counted as a success. Nevertheless, there were some fundamental design problems regarding the competition website itself, which is the topic of this post. These are some of the points that came into my mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, the rules and regulations of the competition, and the instructions were not presented clearly. Everything was distributed, and there were no centralized approach For instance, one had to register for this round through the event page that was created for this purpose. There was a link in the event description, that  could be used to register. when the event started, additional link were added to the same place which was pointing people to the qualification problem page. I was expecting to see the instructions in the new page and after reading all, I could not find out how I should submit my answers. Thus, I decided to open one problem and after reading that I thought maybe I have to download the input to get the instructions !!! After doing that, I opened the file and could just see some numbers in there. So, I decided to go back to the problem page and all of a sudden I saw the time is counting down. Then I went back to the event page and found out that instructions were added to the event description, under the registration link, and it was also could not be seen unless you click on *&amp;#8220;see more&amp;#8221; *to view the instructions. In addition, news and updates were being posted on another page (Hacker Cup page), and in the last day it seems they took off the  6 minute limit, but I again I failed to get updated, as I did not know such things were going on in a separate page.&lt;/li&gt;
&lt;li&gt;The second issue was related to 6 minute limit for submitting the answers. I agree that there should be some mechanisms that make sure solutions are in the range that designers expect, but in this case it was a very bad idea to control the solutions by a timer. What designers might have thought is that if the code is well-written enough, even if program fails once or twice, well, there should be still enough time for people to run their code and copy-paste the answer. At first glance it seems fair, but they failed to take other parameters into consideration. If people were using same computers with same internet connection, and of course same browsers (it seems chrome had some problems with downloading the input file), and under same circumstances it could be considered as fair. What if someone do not have access to broadband or the connection drops frequently !? Or someone has access to a very powerful computer system which despite any bad coding styles could deliver the answer in less than the amount of time provided ?! My own problem was the &amp;#8220;Peg&amp;#8217;s game&amp;#8221; input, it was big for Putty to handle, so it freeze twice (I was coding on another machine through SSH). Then I had to  start the FTP service, upload the file via FTP, and voila 6 minutes passed !&lt;/li&gt;
&lt;li&gt;The other problem was related to the explanation of the &amp;#8220;Peg&amp;#8217;s game&amp;#8221;. I think it was the most awful description I&amp;#8217;ve ever read in my life. The problem was a piece of cake when one fully understands it. But I think the main challenge here was understanding it. It took me a while to decrypt what was the real purpose of the question and how everything is connected together. I thought maybe it&amp;#8217;s me, and I did search today in order to see if others had any concerns about this problem. As I started to search, I found tons of different interpretations of the problem. So it seems that the designer failed to explain the problem clearly. I think it is related to the *Curse of Knowledge *(Refer to Made to Stick), which claims that the more you know about a subject the less you could know how it feels not knowing about that subject. It probably happened to you too, trying to explain something which seems obvious to you but others cannot understand a thing you are saying.&lt;/li&gt;
&lt;li&gt;The last issue is the name of the competition does not match the content of it. They call it a hacker cup, though there were nothing to hack here, just simple programming questions. I took part in &lt;a title=&#34;HackU&#34; href=&#34;http://developer.yahoo.com/hacku/&#34; target=&#34;_blank&#34;&gt;Yahoo! HackU&lt;/a&gt; last year in University of Waterloo, and it was closer to a hacking competition than this competition. HackU is about using various tools to come up with a neat idea that blow judge&amp;#8217;s mind. I hope next rounds get closer to hacking idea than solving problems. Current situation seems more like Facebook is saying: &amp;#8220;Interviewing this amount of programmers is gonna take a lot of time, we prefer to make a competition online to select our programmers among them. And it&amp;#8217;s a better way cause people have to prove themselves&amp;#8221;. Which is absolutely fine, ( I think all the competitions are all about this), but the only hacking was to hack designers&amp;#8217; mind and the website to get the instructions and understand the problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, it is a very good move from Facebook to gather all this people to compete against each other and express their opinions. I Specially liked the way people could express their opinions on the event wall, there were lots of interesting posts, and most of them could be counted as a feedback ( Which was effective at least for taking off the time limit). I hope in the next round, geeks do not design the website, and get help from more experienced people in this area to take all the basic requirements into considerations.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#39;st\_facebook&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span st\_via=&#39;saman\_b&#39; class=&#39;st\_twitter&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_email&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_sharethis&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_fblike&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_plusone&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_pinterest&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Power of Free</title>
      <link>http://samanbarghi.com/2010/07/13/the-power-of-free</link>
      <pubDate>Tue, 13 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2010/07/13/the-power-of-free</guid>
      <description>&lt;p&gt;I am no coffee drinker, I prefer green tea and herbal tea over coffee. I rarely break this habit, only if I am too sleepy or really crave coffee. But once I was in a gathering in Davis Center (at University of Waterloo) and they were offering free coffee and donuts. All of a sudden I found myself socializing and drinking coffee without having any good reason for breaking my habit, I could not justify my behavior at the time. After giving some thoughts to the matter, I came up with two reasons to justify this behavior; either that was the effect of the coffee being free, or the socializing effect; I wanted to be like others. Now there are two questions to be asked:&lt;/p&gt;

&lt;p&gt;The first question is: is all the stuff that are being offered to you for free, are actually free? What are the hidden costs of free stuff for you? How much are you paying (mentally and physically) to get something that worth nothing (money wise)? Dan Ariely describe and [experiment ][1] that he runs about free ice cream in his blog. He claims that free stuff are not actually free, cause for example you are investing your time in the line to get an ice cream that worth $1.45. But is that the only price you are paying? What about an overweight person who is on a diet and happened to pass by Ben &amp;amp; Jerry, and decides to get one ice-cream cause it&amp;#8217;s free? (Yeah will power is effective here, but sometimes FREE is more tempting than anything else)&lt;/p&gt;

&lt;p&gt;There are other situations rather than free ice-cream, such as free shampoos given away, shavers, &amp;#8230;. In all these cases they are changing your mentality towards their company. Now your unconscious might tend to make you believe that this company is generous and you might want to do them a favor back in the future and buy their products later, and become a loyal costumer. Most of the companies are smarter and try to make you dependent on their products, think about all the blades you bought from a certain company because you got the razor for free! These are all hidden costs of free stuff which are not obvious in the first place.&lt;/p&gt;

&lt;p&gt;The second question to be asked is: how much are you willing to sacrifice to be part of a group? How many values are you going to destroy to be mentally close to the ones who are around you? Again this is related to will power, to hold on to your values and what you believe-in, even when others around you are making you feel bad about it. We are all seeking for approval from other people, that&amp;#8217;s why we try to look like others. Nevertheless, what is the life you are seeing in front of you? The one you take control of it or the one others control for you?&lt;/p&gt;

&lt;p&gt;&lt;span class=&#39;st\_facebook&#39; st\_title=&#39;The Power of Free&#39; st_url=&#39;http://www.samanbarghi.com/2010/07/13/the-power-of-free/&#39;&gt;&lt;/span&gt;&lt;span st\_via=&#39;saman\_b&#39; class=&#39;st\_twitter&#39; st\_title=&#39;The Power of Free&#39; st_url=&#39;http://www.samanbarghi.com/2010/07/13/the-power-of-free/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_email&#39; st\_title=&#39;The Power of Free&#39; st_url=&#39;http://www.samanbarghi.com/2010/07/13/the-power-of-free/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_sharethis&#39; st\_title=&#39;The Power of Free&#39; st_url=&#39;http://www.samanbarghi.com/2010/07/13/the-power-of-free/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_fblike&#39; st\_title=&#39;The Power of Free&#39; st_url=&#39;http://www.samanbarghi.com/2010/07/13/the-power-of-free/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_plusone&#39; st\_title=&#39;The Power of Free&#39; st_url=&#39;http://www.samanbarghi.com/2010/07/13/the-power-of-free/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_pinterest&#39; st\_title=&#39;The Power of Free&#39; st_url=&#39;http://www.samanbarghi.com/2010/07/13/the-power-of-free/&#39;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&#34;http://danariely.com/2008/02/29/free-2/&#34;&gt;http://danariely.com/2008/02/29/free-2/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rationality</title>
      <link>http://samanbarghi.com/2010/04/12/rationality</link>
      <pubDate>Mon, 12 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2010/04/12/rationality</guid>
      <description>&lt;p&gt;There are moments in life when you have to make a big decision, however, your emotions and ego block your mind. You cannot think clearly, and you see everything the way you want them to be, but the reality is on the exact opposite side. If you just rely on yourself and float in your thoughts, you are gonna drown at the very bottom of these thoughts. There is no way out of your doubts and uncertainty, it either makes you go crazy or  never let you get in touch with reality.&lt;/p&gt;

&lt;p&gt;You are trapped in a box created by you, and you cannot see out of the box, all you need is to break the wall and see outside of the box. But not everybody is strong enough to overcome their fears of what they are about to see and embrace the reality. These are the exact moments that friends were created for, you need someone that sees outside the box. If you consult the situation with someone else, someone you trust, you can see through his eyes and step by step see the light of reality.&lt;/p&gt;

&lt;p&gt;A very familiar example is a broken relationship. I have seen many people get emotional when the other person leaves them or cheat on them after they have been in a relationship for a while. They do not want to believe that either the other side does not want them, or they cannot trust the other side anymore. They see through the eyes of their memories and all the good moments they had together. The first thing they do is not letting the other side go, as the low self-confidence created by the rejection makes them hold on to that person harder. It gets harder and harder for them to believe the other side is cheated on them or does not want them, what they want to believe is that everything is back to normal and they can fix things. They tend to believe every lies that the other side is telling them, they can be easily played. They can survive if a friend come to the scene and open their eyes to their reality, it feels awful but they have to do what has to be done.&lt;/p&gt;

&lt;p&gt;The main question here is how to detect these moments ? How to stay in touch with reality all the time and keep emotions away? What should you do after you detected you trapped in a box? how can you see outside of the box with your own power and without getting any help from someone else? What will be the possible practice to strengthen this ability?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Also, check the following: &lt;a href=&#34;http://www.newyorker.com/online/blogs/frontal-cortex/2012/06/daniel-kahneman-bias-studies.html&#34;&gt;http://www.newyorker.com/online/blogs/frontal-cortex/2012/06/daniel-kahneman-bias-studies.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&#39;st\_facebook&#39; st\_title=&#39;Rationality&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/rationality/&#39;&gt;&lt;/span&gt;&lt;span st\_via=&#39;saman\_b&#39; class=&#39;st\_twitter&#39; st\_title=&#39;Rationality&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/rationality/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_email&#39; st\_title=&#39;Rationality&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/rationality/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_sharethis&#39; st\_title=&#39;Rationality&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/rationality/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_fblike&#39; st\_title=&#39;Rationality&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/rationality/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_plusone&#39; st\_title=&#39;Rationality&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/rationality/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_pinterest&#39; st\_title=&#39;Rationality&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/rationality/&#39;&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>See ID</title>
      <link>http://samanbarghi.com/2010/04/12/see-id</link>
      <pubDate>Mon, 12 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2010/04/12/see-id</guid>
      <description>&lt;p&gt;I used to be asked to show my ID every time  I was paying by my credit card, and yes you are right, I did not sign the back of my credit card (That is how it works in Canada, they are taking it to the next level for entering a PIN number though). Today I was asked to show my ID again, but I noticed  no one has asked me to show my ID for last two months. Surprisingly, I could successfully stop ID checks without signing the back of my credit card. You are probably confused, but it is not that complicated. Instead of signing the back, I simply wrote &amp;#8220;&lt;strong&gt;&lt;em&gt;See ID&lt;/em&gt;&lt;/strong&gt;&amp;#8221; on the signature area. It was supposed to make cashiers to ask more about my ID, but to my surprise it worked the other way !&lt;/p&gt;

&lt;p&gt;Does anyone has a rational explanation for the fake trust created by writing such a sentence? The first question I asked myself was  if the sentence created some sort of trust, or it is just because people do not like to do what they are told to do. What makes people more trustful when you directly tell them what you expect them to do!? I will start to do some research to find a proper answer to my question.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#39;st\_facebook&#39; st\_title=&#39;See ID&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/see-id/&#39;&gt;&lt;/span&gt;&lt;span st\_via=&#39;saman\_b&#39; class=&#39;st\_twitter&#39; st\_title=&#39;See ID&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/see-id/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_email&#39; st\_title=&#39;See ID&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/see-id/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_sharethis&#39; st\_title=&#39;See ID&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/see-id/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_fblike&#39; st\_title=&#39;See ID&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/see-id/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_plusone&#39; st\_title=&#39;See ID&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/see-id/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_pinterest&#39; st\_title=&#39;See ID&#39; st_url=&#39;http://www.samanbarghi.com/2010/04/12/see-id/&#39;&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPDY installation</title>
      <link>http://samanbarghi.com/2010/03/31/spdy-installation</link>
      <pubDate>Wed, 31 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2010/03/31/spdy-installation</guid>
      <description>

&lt;p&gt;I am taking a course called &amp;#8220;Latency in Communication Systems&amp;#8221; taught by &lt;a href=&#34;http://www.cs.uwaterloo.ca/~mkarsten/&#34; target=&#34;_blank&#34;&gt;Martin Karsten&lt;/a&gt; in University of Waterloo. We talked about different aspects of latency in communication systems, there were some lectures from industry (Sandvine, TD Securites, RIM, and SUN/Oracle) about what were the different problems they were facing during their system implementation. I had also presented two papers on profiling and router performance during the course. My course project is the reason I am writing this post, I have to install and evaluate &lt;a title=&#34;SPDY&#34; href=&#34;http://www.chromium.org/spdy&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;SPDY&lt;/strong&gt;&lt;/a&gt;. SPDY is a new application-layer protocol designed by Google to replace HTTP in order to make the web faster. It offers multiple requests per connection, server-initiated requests along with the client-initiated requests, header and data compression over SSL. In this post I am not going to talk about SPDY and it&amp;#8217;s features, I will explain the process of SPDY client (chromium) and server installation as I need them later to evaluate this protocol.&lt;/p&gt;

&lt;h2 id=&#34;install-chromium:9b6dd0bb85defcc32bbe025166e81019&#34;&gt;Install Chromium&lt;/h2&gt;

&lt;p&gt;Edit: Follow the build instruction for linux here: &lt;a href=&#34;http://code.google.com/p/chromium/wiki/LinuxBuildInstructions&#34;&gt;http://code.google.com/p/chromium/wiki/LinuxBuildInstructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started to compile chromium on Ubuntu Karmic Koala 9.10. The obvious place to start is the &lt;a title=&#34;Chromium&#34; href=&#34;http://dev.chromium.org/&#34; target=&#34;_blank&#34;&gt;chromium website&lt;/a&gt;, Although take a look at &lt;a title=&#34;Cache data for SPDY server&#34; href=&#34;http://groups.google.com/group/spdy-dev/browse_thread/thread/16e0a9d5592ca908&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;, we need to enable data recording to cache some data for the in-memory server, I will explain this later. These are the required step to take :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install all the &lt;a title=&#34;Chromium Ubuntu prerequisites&#34; href=&#34;http://code.google.com/p/chromium/wiki/LinuxBuildInstructionsPrerequisites#Ubuntu_Setup&#34; target=&#34;_blank&#34;&gt;prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download the source tarball from &lt;a title=&#34;Chromium Source tarball&#34; href=&#34;http://build.chromium.org/buildbot/archives/chromium_tarball.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Extract it to a location (It should not include any spaces). I extracted it to &lt;tt&gt;~/chromium&lt;/tt&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install depot_tools&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;svn co http://src.chromium.org/svn/trunk/tools/depot_tools&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add depot_tools to your PATH:
&lt;code&gt;$ export PATH=`pwd`/depot_tools:&amp;quot;$PATH&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Updating your checkout once by running &lt;code&gt;gclient sync --force&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: arial,sans-serif;&#34;&gt; in the source code directory (~/chromium/src). It is important to include the &amp;#8216;&amp;#8211;force&amp;#8217; option as I was getting this message: &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;make: *** No rule to make target `third_party/yasm/source/patched-yasm/ modules/arch/x86/gen_x86_insn.py&#39;, needed by `out/Debug/obj/gen/ third_party/yasm/x86insns.c&#39;. Stop.&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: arial,sans-serif;&#34;&gt;over and over again since I forgot to include the &lt;tt&gt;&amp;ndash;force&lt;/tt&gt; option. It seems that this command generate platform-specific files&lt;/span&gt;&lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; ensure that you have &lt;tt&gt;GYP_GENERATORS=make&lt;/tt&gt; in your environment before running &lt;tt&gt;gclient sync&lt;/tt&gt; or &lt;tt&gt;gclient runhooks &amp;ndash;force&lt;/tt&gt;. This tells the Chromium build system to output Makefiles. Example: &lt;code&gt;export GYP_GENERATORS=make
gclient sync&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Take this step only if you want to record data to be used by flip-server, if you just want to compile and run chromium skip this step and go to step 9. Modify the file &lt;tt&gt;chrome/common/chrome_constants.cc &lt;/tt&gt;- change the line which reads &lt;code&gt;kRecordModeEnabled = false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kRecordModeEnabled = true&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to the source directory and write (if you are using a multiple-core machine use &lt;tt&gt;-jX&lt;/tt&gt;, where &lt;tt&gt;X&lt;/tt&gt; is the number of make processes to startup): &lt;code&gt;make chrome&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can find the executable in &lt;tt&gt;src/out/Debug/chrome&lt;/tt&gt;&lt;/ol&gt;
Now you should be able to run chrome with no problem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-flip-server:9b6dd0bb85defcc32bbe025166e81019&#34;&gt;Install flip-server&lt;/h2&gt;

&lt;p&gt;To install flip-server, take a look at &lt;a title=&#34;Flip server installation&#34; href=&#34;http://www.chromium.org/spdy/running_flipinmemserver&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;. Go to the Chromuim &lt;tt&gt;src&lt;/tt&gt; directory, and here are the steps that I took to install flip server:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you don&amp;#8217;t already have a test key.pem and certificate.pem, you can generate one like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -out key.pem 1024
openssl req -new -key key.pem -out request.pem  #and answer the questions at the prompt with whatever
openssl x509 -req -days 30 -in request.pem -signkey key.pem -out cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get the patch from: &lt;a href=&#34;http://codereview.chromium.org/1566013&#34;&gt;http://codereview.chromium.org/1566013&lt;/a&gt;, Click the &amp;#8216;download raw patch&amp;#8217; link and save. Assuming you&amp;#8217;re in the &lt;tt&gt;chromium/src&lt;/tt&gt; directory, type: &lt;code&gt;patch -p0 &amp;lt; filename_of_the_patch_you_just_downloaded&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find the commented-out-section in net.gyp (look for &amp;#8216;flip_in_mem_edsm_server&amp;#8221;) and uncomment it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will need to install the openssl libraries. The exact packages depend on your linux distribution (but will be named something like ssl-dev or openssl-dev, or in ubuntu libssl-dev), so watch the error messages, if any. After you&amp;#8217;ve done all that, you do: &lt;code&gt;make out/Debug/flip_in_mem_edsm_server&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I had to change these lines to get rid of some compiling errors :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While compiling I got :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/include/linux/tcp.h:72: error: &#39;__u32 __fswab32(__u32)&#39; cannot
appear in a constant-expression
/usr/include/linux/tcp.h:72: error: a function call cannot appear in a
constant-expression
/usr/include/linux/tcp.h:73: error: &#39;__u32 __fswab32(__u32)&#39; cannot
appear in a constant-expression
/usr/include/linux/tcp.h:73: error: a function call cannot appear in a
constant-expression
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix it, in file &lt;tt&gt;src/net/tools/flip_server/flip_in_mem_edsm_server.cc&lt;/tt&gt; change the line that reads:&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;#include &amp;lt;linux/tcp.h&amp;gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;#include &amp;lt;netinet/tcp.h&amp;gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the same file change : &lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;state-&amp;gt;ssl_method = SSLv23_method();&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;state-&amp;gt;ssl_method = const_cast&amp;lt;SSL_METHOD *&amp;gt; (SSLv23_method()); &lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I was getting some errors related to &lt;tt&gt;printSslError &lt;/tt&gt; function in &lt;tt&gt;flip_in_mem_edsm_server.cc&lt;/tt&gt;, it seems that this function prints out the errors related to SSL encryption, since I did not need that I commented the contents of the function out.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;install-chrome-which-is-able-to-talk-to-localhost-server:9b6dd0bb85defcc32bbe025166e81019&#34;&gt;Install Chrome which is able to talk to localhost server&lt;/h2&gt;

&lt;p&gt;Now if you want a quick chrome installation that is able to talk to your installed server on localhost you need to copy the following script, save it in a file and run &lt;tt&gt;bash filename&lt;/tt&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

if [ &amp;quot;$(dpkg --print-architecture)&amp;quot; == &amp;quot;amd64&amp;quot; ]; then
  echo -ne &amp;quot;\n\nYou have a 64 bit computer\n\n&amp;quot;
  linux_versions=&amp;quot;linux64&amp;quot;;
else
  echo -ne &amp;quot;\n\nYou have a 32 bit computer\n\n&amp;quot;
  linux_versions=&amp;quot;linux&amp;quot;;
fi

for linux_version in $linux_versions; do
  install_dir=$HOME/spdy-chrome-canary/$linux_version

  if mkdir -p $install_dir; then
    echo &amp;quot;Directory: \&amp;quot;$install_dir\&amp;quot; made or already existed&amp;quot;
  else
      echo &amp;quot;$install_dir exists, but is not a directory.&amp;quot;
      echo &amp;quot;Please remove whatever is there so this script can proceed next time.&amp;quot;
      exit 128
  fi

  pushd $install_dir

  install -d chrome-linux-old
  mv chrome-linux chrome-linux-old/chrome-linux-`date +&amp;quot;%F-%k-%M-%S-%N&amp;quot;`
  rm -rf chrome-linux chrome-linux-old chrome-linux.zip
  wget http://build.chromium.org/buildbot/continuous/$linux_version/LATEST/chrome-linux.zip
  unzip chrome-linux.zip
  rm -rf chrome-linux.zip

  popd

  filename_base=SPDY-Chrome-$linux_version
  cat &amp;amp;gt;&amp;amp;gt; $HOME/Desktop/$filename_base.desktop &amp;amp;lt;&amp;amp;lt;-EOF
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=$filename_base
Categories=Application;Network;WebBrowser;
Exec=$install_dir/chrome-linux/chrome --use-spdy --enable-logging --log-level=0 --user-data-dir=.$filename_base %U
Icon=/tmp/chrome-linux/product_logo_48.png
MimeType=text/html;text/xml;
Terminal=false
Type=Application
EOF

  filename_base=SPDY-Chrome-local-server-$linux_version
  cat &amp;amp;gt;&amp;amp;gt; $HOME/Desktop/$filename_base.desktop &amp;amp;lt;&amp;amp;lt;-EOF
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=$filename_base
Categories=Application;Network;WebBrowser;
Exec=$install_dir/chrome-linux/chrome --use-spdy --enable-logging --log-level=0 --user-data-dir=.$filename_base --host-resolver-rules=&#39;MAP * localhost&#39; --testing-fixed-http-port=10040 --testing-fixed-https-port=10040 %U
Icon=/tmp/chrome-linux/product_logo_48.png
MimeType=text/html;text/xml;
Terminal=false
Type=Application
EOF

  filename_base=NO-SPDY-Chrome-local-server-$linux_version
  cat &amp;amp;gt;&amp;amp;gt; $HOME/Desktop/$filename_base.desktop &amp;amp;lt;&amp;amp;lt;-EOF
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=$filename_base
Categories=Application;Network;WebBrowser;
Exec=$install_dir/chrome-linux/chrome --enable-logging --log-level=0 --user-data-dir=.$filename_base --host-resolver-rules=&#39;MAP * localhost&#39; --testing-fixed-http-port=16002 --testing-fixed-https-port=16002 %U
Icon=/tmp/chrome-linux/product_logo_48.png
MimeType=text/html;text/xml;
Terminal=false
Type=Application
EOF

done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The power of options</title>
      <link>http://samanbarghi.com/2010/03/16/the-power-of-options</link>
      <pubDate>Tue, 16 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2010/03/16/the-power-of-options</guid>
      <description>&lt;p&gt;The library of Davis Center at University of Waterloo is a fairly popular place for students to spend their time studying. There is this quiet section, with separate study space for each student equipped with florescent lighting, where seems to be the most popular place in the library. Based on the time of day, if exams time is close or not, if it is a weekend or not, and some other parameters, two possible scenarios might happen; the place is either packed or is half empty. Now, the interesting part is how students behave while looking for a place in this section.&lt;/p&gt;

&lt;p&gt;Lets consider the first scenario when the study area is packed;  in this case all desks are occupied and if you get lucky and be fast, you might be able to find an empty spot. So in this case you have to walk fast, focus on what you are looking for, and as soon as finding an empty spot,  you sit down without a second thought.&lt;/p&gt;

&lt;p&gt;Nonetheless, there are more available seats on the second scenario as you walk in to the study area. Considering the first case, you should be happy with the first available spot. This time students show a totally different behavior (including me). Now that they have more options, they do not simply sit on the first available spot they find unlike the former situation. Students tend to have &lt;strong&gt;preferences&lt;/strong&gt;, they take their time to walk around and find their **preferred **spot, although the seats are exactly the same.&lt;/p&gt;

&lt;p&gt;What happened? Students developed preferences when they had more options, and were fully satisfied with their choice when there were no options available. After observing this behavior, I recalled the &lt;a title=&#34;Barry Schartws on the Paradox of Choice&#34; href=&#34;http://www.ted.com/talks/barry_schwartz_on_the_paradox_of_choice.html&#34; target=&#34;_blank&#34;&gt;Barry Schwartz TED talk on the &amp;#8220;Paradox of Choice&amp;#8221;&lt;/a&gt;. In this talk he notes the availability of more choices made us more paralyzed and dissatisfied rather than free and satisfied.&lt;/p&gt;

&lt;p&gt;You can observe such a scenario in your everyday life; in relationships for example,  you are always looking for a better match, if you think there is someone better for you out there, you will be unhappy about your relationship.  As another example, when I started my PhD, I had the option to get a job instead, so sometimes I feel finding a job could have been a better choice at that time, and thinking about the possible benefits of a job making me dissatisfied. If I only had the PhD option I could have been happier as I knew that was the only choice I had.  As a graduate student in Canada, during the winter I do more studying than summer, why? Good weather during the summer is the answer, I have the option to go out and enjoy the weather instead of sitting in my office without any windows (The funny thing about the Computer Science department at University of Waterloo is that it made out of glass but none of the offices have windows !!! Yet as you can see, this is another example of being dissatisfied as I am aware of the option of having an office with windows). Even reading a book such as David Allen&amp;#8217;s  &lt;a title=&#34;Getting Things Done&#34; href=&#34;http://www.amazon.ca/Getting-Things-Done-David-Allen/dp/0142000280/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Getting Things Done (GTD)&amp;#8221;&lt;/a&gt;,  make you spend a week or two to find a good way of implementing it. The reason is that there are too many options for starting such a system.  I, myself ended up using a &lt;a title=&#34;Moleskine&#34; href=&#34;http://www.moleskine.com/&#34; target=&#34;_blank&#34;&gt;moleskine&lt;/a&gt; and a pen at the end.&lt;/p&gt;

&lt;p&gt;This simple aspect of people&amp;#8217;s behavior can be very powerful for marketing ideas. Dan Areily in &lt;a title=&#34;Predictably Irrational&#34; href=&#34;http://www.predictablyirrational.com/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Predictably Irrational&amp;#8221;&lt;/a&gt; give an example on the first bread maker. When bread makers were first introduced they were not selling good, as people could not find a reason to buy one. But when the company introduced the second bread maker which was more expensive than the first one, people started to buy the first bread maker and sales took off. People started to have something to compare the first bread maker with, and since it was priced more reasonably they found the urge to buy it.&lt;/p&gt;

&lt;p&gt;One another obvious example, which you might have experienced, is the store sales and discounts. Not all but some people tend to buy everything that they find on sale, even if they do not need it. I have a friend who is addicted to shopping, it does not matter what it is as long as it is on sale, it is good to buy, Why? It is just about the good and victorious feeling that he has after finding a deal, and he can talk about it for hours. There is no doubt that you have experienced the same feeling, think of the moments you were talking about a good deal you found on your favorite gadget (or dress).&lt;/p&gt;

&lt;p&gt;If you look it from another angle, these deals can make you dissatisfied as well. For instance, I was trying to buy a laptop backpack and found hundreds of them online, it took me almost two weeks to make a decision and choose one. However, at the end if you hear someone talking about a deal on backpack laptops or you happen to go to a store with a better and cheaper backpack you will be dissatisfied immediately. There is this documentary about &lt;a title=&#34;How to make better decisions&#34; href=&#34;http://topdocumentaryfilms.com/how-to-make-better-decisions/&#34; target=&#34;_blank&#34;&gt;how to make better decisions&lt;/a&gt; from BBC, the experiments in this documentary are surprisingly unbelievable. There is an experiment, in which two photos from different persons are shown to the participants. They choose one of them that they like more than the other, with a simple trick the photo they did not like is given to them instead of the one they ed more. Now, the participants are asked :why they like that person? (of course, without knowing that this person is not the one they chose). They start explaining the reasons although they did not have any interest in that person. This experiment shows how people can simply change their mind and be satisfied with the new situation, if the options are removed.&lt;/p&gt;

&lt;p&gt;Tim Harford in his book, &lt;a title=&#34;The logic of Life&#34; href=&#34;http://timharford.com/logicoflife/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;The logic of Life&amp;#8221;&lt;/a&gt;, gives another example about this issue. He provides an experiment over speed dating, where random people are brought to a room and they have limited time to talk to each other, and at the end,  each person pick a match based on their standards.  Tim notes that girls are more attracted to tall guys and guys are more attracted to thin girls. Imagine that, in a speed dating night there are 20 guys and 20 girls. Tim says that if there is a short guy among the guys and other guys are mostly tall, the short guy most probably will not get a date. However, if all 20 guys are short in the session, girls lower their expectations, compromise with the new situation and the chance of each short guy of being picked is higher. The story is the same for fat girls.  As you can see, adding or removing choices will make people act differently, although the short guy is still the same.&lt;/p&gt;

&lt;p&gt;In conclusion, it seems that &lt;strong&gt;choice&lt;/strong&gt; is a very powerful parameter that shapes the decisions we make. Providing more choices, or removing them can be easily used by businesses, governments and advertisers to control our life without us even knowing it.  As Barry Schwartz states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;one should lower his expectations to be more happy&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&#39;st\_facebook&#39; st\_title=&#39;The power of options&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/16/the-power-of-options/&#39;&gt;&lt;/span&gt;&lt;span st\_via=&#39;saman\_b&#39; class=&#39;st\_twitter&#39; st\_title=&#39;The power of options&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/16/the-power-of-options/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_email&#39; st\_title=&#39;The power of options&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/16/the-power-of-options/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_sharethis&#39; st\_title=&#39;The power of options&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/16/the-power-of-options/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_fblike&#39; st\_title=&#39;The power of options&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/16/the-power-of-options/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_plusone&#39; st\_title=&#39;The power of options&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/16/the-power-of-options/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_pinterest&#39; st\_title=&#39;The power of options&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/16/the-power-of-options/&#39;&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>