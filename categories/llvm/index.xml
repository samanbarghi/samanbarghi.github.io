<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>llvm on Saman Barghi</title><link>http://samanbarghi.com/categories/llvm/</link><description>Recent content in llvm on Saman Barghi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Dec 2016 10:40:49 -0500</lastBuildDate><atom:link href="http://samanbarghi.com/categories/llvm/index.xml" rel="self" type="application/rss+xml"/><item><title>Generate C interface from C++ source code using Clang libtooling</title><link>http://samanbarghi.com/blog/2016/12/06/generate-c-interface-from-c-source-code-using-clang-libtooling/</link><pubDate>Tue, 06 Dec 2016 10:40:49 -0500</pubDate><guid>http://samanbarghi.com/blog/2016/12/06/generate-c-interface-from-c-source-code-using-clang-libtooling/</guid><description>I developed a concurrent user-thread library using C++, and was looking for a way to provide a C interface and make the functionality available in C. In order to achieve this goal, I started writting a C wrapper interface manually where each public method of a class is mapped to a function in C with the class name followed by the function name. Also, constructors are mapped to class name followed by _create and destructors are mapped to the class name followed by _destory.</description></item></channel></rss>