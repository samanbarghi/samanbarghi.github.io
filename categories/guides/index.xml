<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on Saman Barghi</title>
    <link>http://samanbarghi.com/categories/guides/</link>
    <description>Recent content in Guides on Saman Barghi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Mar 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://samanbarghi.com/categories/guides/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SPDY installation</title>
      <link>http://samanbarghi.com/2010/03/31/spdy-installation</link>
      <pubDate>Wed, 31 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2010/03/31/spdy-installation</guid>
      <description>

&lt;p&gt;I am taking a course called &amp;#8220;Latency in Communication Systems&amp;#8221; taught by &lt;a href=&#34;http://www.cs.uwaterloo.ca/~mkarsten/&#34; target=&#34;_blank&#34;&gt;Martin Karsten&lt;/a&gt; in University of Waterloo. We talked about different aspects of latency in communication systems, there were some lectures from industry (Sandvine, TD Securites, RIM, and SUN/Oracle) about what were the different problems they were facing during their system implementation. I had also presented two papers on profiling and router performance during the course. My course project is the reason I am writing this post, I have to install and evaluate &lt;a title=&#34;SPDY&#34; href=&#34;http://www.chromium.org/spdy&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;SPDY&lt;/strong&gt;&lt;/a&gt;. SPDY is a new application-layer protocol designed by Google to replace HTTP in order to make the web faster. It offers multiple requests per connection, server-initiated requests along with the client-initiated requests, header and data compression over SSL. In this post I am not going to talk about SPDY and it&amp;#8217;s features, I will explain the process of SPDY client (chromium) and server installation as I need them later to evaluate this protocol.&lt;/p&gt;

&lt;h2 id=&#34;install-chromium:9b6dd0bb85defcc32bbe025166e81019&#34;&gt;Install Chromium&lt;/h2&gt;

&lt;p&gt;Edit: Follow the build instruction for linux here:Â &lt;a href=&#34;http://code.google.com/p/chromium/wiki/LinuxBuildInstructions&#34;&gt;http://code.google.com/p/chromium/wiki/LinuxBuildInstructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started to compile chromium on Ubuntu Karmic Koala 9.10. The obvious place to start is the &lt;a title=&#34;Chromium&#34; href=&#34;http://dev.chromium.org/&#34; target=&#34;_blank&#34;&gt;chromium website&lt;/a&gt;, Although take a look at &lt;a title=&#34;Cache data for SPDY server&#34; href=&#34;http://groups.google.com/group/spdy-dev/browse_thread/thread/16e0a9d5592ca908&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;, we need to enable data recording to cache some data for the in-memory server, I will explain this later. These are the required step to take :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install all the &lt;a title=&#34;Chromium Ubuntu prerequisites&#34; href=&#34;http://code.google.com/p/chromium/wiki/LinuxBuildInstructionsPrerequisites#Ubuntu_Setup&#34; target=&#34;_blank&#34;&gt;prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download the source tarball from &lt;a title=&#34;Chromium Source tarball&#34; href=&#34;http://build.chromium.org/buildbot/archives/chromium_tarball.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Extract it to a location (It should not include any spaces). I extracted it to &lt;tt&gt;~/chromium&lt;/tt&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install depot_tools&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;svn co http://src.chromium.org/svn/trunk/tools/depot_tools &lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add depot_tools to your PATH: &lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;$ export PATH=&lt;code&gt;pwd&lt;/code&gt;/depot_tools:&amp;ldquo;$PATH&amp;rdquo; &lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Updating your checkout once by running &lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;gclient sync &amp;ndash;force &lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: arial,sans-serif;&#34;&gt; in the source code directory (~/chromium/src). It is important to include the &amp;#8216;&amp;#8211;force&amp;#8217; option as I was getting this message: &lt;/span&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;make: *** No rule to make target `third_party/yasm/source/patched-yasm/ modules/arch/x86/gen_x86_insn.py&#39;, needed by `out/Debug/obj/gen/ third_party/yasm/x86insns.c&#39;. Stop.&#34; &lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;font-family: arial,sans-serif;&#34;&gt;over and over again since I forgot to include the &lt;tt&gt;&amp;ndash;force&lt;/tt&gt; option. It seems that this command generate platform-specific files&lt;/span&gt;&lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; ensure that you have &lt;tt&gt;GYP_GENERATORS=make&lt;/tt&gt; in your environment before running &lt;tt&gt;gclient sync&lt;/tt&gt; or &lt;tt&gt;gclient runhooks &amp;ndash;force&lt;/tt&gt;. This tells the Chromium build system to output Makefiles. Example: &lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;export GYP_GENERATORS=make
gclient sync&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Take this step only if you want to record data to be used by flip-server, if you just want to compile and run chromium skip this step and go to step 9. Modify the file &lt;tt&gt;chrome/common/chrome_constants.cc &lt;/tt&gt;- change the line which reads &lt;pre class=&#34;brush: cpp; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;kRecordModeEnabled = false&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre class=&#34;brush: cpp; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;kRecordModeEnabled = true&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to the source directory and write (if you are using a multiple-core machine use &lt;tt&gt;-jX&lt;/tt&gt;, where &lt;tt&gt;X&lt;/tt&gt; is the number of make processes to startup): &lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;make chrome &lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can find the executable in &lt;tt&gt;src/out/Debug/chrome&lt;/tt&gt;&lt;/ol&gt;
Now you should be able to run chrome with no problem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-flip-server:9b6dd0bb85defcc32bbe025166e81019&#34;&gt;Install flip-server&lt;/h2&gt;

&lt;p&gt;To install flip-server, take a look at &lt;a title=&#34;Flip server installation&#34; href=&#34;http://www.chromium.org/spdy/running_flipinmemserver&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;. Go to the Chromuim &lt;tt&gt;src&lt;/tt&gt; directory, and here are the steps that I took to install flip server:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you don&amp;#8217;t already have a test key.pem and certificate.pem, you can generate one like so: &lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;openssl genrsa -out key.pem 1024
openssl req -new -key key.pem -out request.pem  #and answer the questions at the prompt with whatever
openssl x509 -req -days 30 -in request.pem -signkey key.pem -out cert.pem&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get the patch from: &lt;a href=&#34;http://codereview.chromium.org/1566013&#34;&gt;http://codereview.chromium.org/1566013&lt;/a&gt;, Click the &amp;#8216;download raw patch&amp;#8217; link and save. Assuming you&amp;#8217;re in the &lt;tt&gt;chromium/src&lt;/tt&gt; directory, type: &lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;patch -p0 &amp;lt; filename_of_the_patch_you_just_downloaded&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find the commented-out-section in net.gyp (look for &amp;#8216;flip_in_mem_edsm_server&amp;#8221;) and uncomment it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will need to install the openssl libraries. The exact packages depend on your linux distribution (but will be named something like ssl-dev or openssl-dev, or in ubuntu libssl-dev), so watch the error messages, if any. After you&amp;#8217;ve done all that, you do: &lt;pre class=&#34;brush: bash; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;make out/Debug/flip_in_mem_edsm_server &lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I had to change these lines to get rid of some compiling errors :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While compiling I got :&lt;br /&gt;
&amp;gt; &lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;/usr/include/linux/tcp.h:72: error: &amp;lsquo;__u32 &lt;strong&gt;fswab32(&lt;/strong&gt;u32)&amp;rsquo; cannot
appear in a constant-expression
/usr/include/linux/tcp.h:72: error: a function call cannot appear in a
constant-expression
/usr/include/linux/tcp.h:73: error: &amp;lsquo;__u32 &lt;strong&gt;fswab32(&lt;/strong&gt;u32)&amp;rsquo; cannot
appear in a constant-expression
/usr/include/linux/tcp.h:73: error: a function call cannot appear in a
constant-expression
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;To fix it, in file &lt;tt&gt;src/net/tools/flip_server/flip_in_mem_edsm_server.cc&lt;/tt&gt; change the line that reads:&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;#include &amp;lt;linux/tcp.h&amp;gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;#include &amp;lt;netinet/tcp.h&amp;gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the same file change : &lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;state-&amp;gt;ssl_method = SSLv23_method();&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;state-&amp;gt;ssl_method = const_cast&amp;lt;SSL_METHOD *&amp;gt; (SSLv23_method()); &lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I was getting some errors related to &lt;tt&gt;printSslError &lt;/tt&gt; function in &lt;tt&gt;flip_in_mem_edsm_server.cc&lt;/tt&gt;, it seems that this function prints out the errors related to SSL encryption, since I did not need that I commented the contents of the function out.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;install-chrome-which-is-able-to-talk-to-localhost-server:9b6dd0bb85defcc32bbe025166e81019&#34;&gt;Install Chrome which is able to talk to localhost server&lt;/h2&gt;

&lt;p&gt;Now if you want a quick chrome installation that is able to talk to your installed server on localhost you need to copy the following script, save it in a file and run &lt;tt&gt;bash filename&lt;/tt&gt;:&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;brush: bash; collapse: true; light: false; title: ; toolbar: true; notranslate&#34; title=&#34;&#34;&gt;#!/bin/bash&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;if [ &amp;ldquo;$(dpkg &amp;ndash;print-architecture)&amp;rdquo; == &amp;ldquo;amd64&amp;rdquo; ]; then
  echo -ne &amp;ldquo;\n\nYou have a 64 bit computer\n\n&amp;rdquo;
  linux_versions=&amp;ldquo;linux64&amp;rdquo;;
else
  echo -ne &amp;ldquo;\n\nYou have a 32 bit computer\n\n&amp;rdquo;
  linux_versions=&amp;ldquo;linux&amp;rdquo;;
fi&lt;/p&gt;

&lt;p&gt;for linux_version in $linux_versions; do
  install_dir=$HOME/spdy-chrome-canary/$linux_version&lt;/p&gt;

&lt;p&gt;if mkdir -p $install_dir; then
    echo &amp;ldquo;Directory: \&amp;ldquo;$install_dir\&amp;rdquo; made or already existed&amp;rdquo;
  else
      echo &amp;ldquo;$install_dir exists, but is not a directory.&amp;rdquo;
      echo &amp;ldquo;Please remove whatever is there so this script can proceed next time.&amp;rdquo;
      exit 128
  fi&lt;/p&gt;

&lt;p&gt;pushd $install_dir&lt;/p&gt;

&lt;p&gt;install -d chrome-linux-old
  mv chrome-linux chrome-linux-old/chrome-linux-&lt;code&gt;date +&amp;quot;%F-%k-%M-%S-%N&amp;quot;&lt;/code&gt;
  rm -rf chrome-linux chrome-linux-old chrome-linux.zip
  wget &lt;a href=&#34;http://build.chromium.org/buildbot/continuous/$linux_version/LATEST/chrome-linux.zip&#34;&gt;http://build.chromium.org/buildbot/continuous/$linux_version/LATEST/chrome-linux.zip&lt;/a&gt;
  unzip chrome-linux.zip
  rm -rf chrome-linux.zip&lt;/p&gt;

&lt;p&gt;popd&lt;/p&gt;

&lt;p&gt;filename_base=SPDY-Chrome-$linux_version
  cat &amp;gt;&amp;gt; $HOME/Desktop/$filename_base.desktop &amp;lt;&amp;lt;-EOF
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=$filename_base
Categories=Application;Network;WebBrowser;
Exec=$install_dir/chrome-linux/chrome &amp;ndash;use-spdy &amp;ndash;enable-logging &amp;ndash;log-level=0 &amp;ndash;user-data-dir=.$filename_base %U
Icon=/tmp/chrome-linux/product_logo_48.png
MimeType=text/html;text/xml;
Terminal=false
Type=Application
EOF&lt;/p&gt;

&lt;p&gt;filename_base=SPDY-Chrome-local-server-$linux_version
  cat &amp;gt;&amp;gt; $HOME/Desktop/$filename_base.desktop &amp;lt;&amp;lt;-EOF
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=$filename_base
Categories=Application;Network;WebBrowser;
Exec=$install_dir/chrome-linux/chrome &amp;ndash;use-spdy &amp;ndash;enable-logging &amp;ndash;log-level=0 &amp;ndash;user-data-dir=.$filename_base &amp;ndash;host-resolver-rules=&amp;lsquo;MAP * localhost&amp;rsquo; &amp;ndash;testing-fixed-http-port=10040 &amp;ndash;testing-fixed-https-port=10040 %U
Icon=/tmp/chrome-linux/product_logo_48.png
MimeType=text/html;text/xml;
Terminal=false
Type=Application
EOF&lt;/p&gt;

&lt;p&gt;filename_base=NO-SPDY-Chrome-local-server-$linux_version
  cat &amp;gt;&amp;gt; $HOME/Desktop/$filename_base.desktop &amp;lt;&amp;lt;-EOF
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=$filename_base
Categories=Application;Network;WebBrowser;
Exec=$install_dir/chrome-linux/chrome &amp;ndash;enable-logging &amp;ndash;log-level=0 &amp;ndash;user-data-dir=.$filename_base &amp;ndash;host-resolver-rules=&amp;lsquo;MAP * localhost&amp;rsquo; &amp;ndash;testing-fixed-http-port=16002 &amp;ndash;testing-fixed-https-port=16002 %U
Icon=/tmp/chrome-linux/product_logo_48.png
MimeType=text/html;text/xml;
Terminal=false
Type=Application
EOF&lt;/p&gt;

&lt;p&gt;done
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&#39;st\_facebook&#39; st\_title=&#39;SPDY installation&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/31/spdy-installation/&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span st\_via=&#39;saman\_b&#39; class=&#39;st\_twitter&#39; st\_title=&#39;SPDY installation&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/31/spdy-installation/&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&#39;st\_email&#39; st\_title=&#39;SPDY installation&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/31/spdy-installation/&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&#39;st\_sharethis&#39; st\_title=&#39;SPDY installation&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/31/spdy-installation/&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&#39;st\_fblike&#39; st\_title=&#39;SPDY installation&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/31/spdy-installation/&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&#39;st\_plusone&#39; st\_title=&#39;SPDY installation&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/31/spdy-installation/&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&#39;st\_pinterest&#39; st\_title=&#39;SPDY installation&#39; st_url=&#39;http://www.samanbarghi.com/2010/03/31/spdy-installation/&#39;&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>