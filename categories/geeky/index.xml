<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geeky on Saman Barghi</title>
    <link>http://samanbarghi.com/categories/geeky/</link>
    <description>Recent content in Geeky on Saman Barghi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://samanbarghi.com/categories/geeky/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to wrap a system call (libc function) in Linux</title>
      <link>http://samanbarghi.com/blog/2014/09/05/how-to-wrap-a-system-call-libc-function-in-linux/</link>
      <pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/blog/2014/09/05/how-to-wrap-a-system-call-libc-function-in-linux/</guid>
      <description>

&lt;p&gt;For one of my research projects I had to wrap linux system calls and redirect
them to another thread. In Linux system calls are not invoked directly, but
rather via wrapper functions in
glibc[&lt;a href=&#34;http://man7.org/linux/man-pages/man2/syscalls.2.html&#34;&gt;man 2 syscalls&lt;/a&gt;]. The glibc
wrapper is only copying arguments and unique system call number to the registers
where the kernel expects them, then trapping to kernel mode and setting the
errno if the system call returns an error number [&lt;a href=&#34;http://man7.org/linux/man-pages/man2/intro.2.html&#34;&gt;man 2 intro&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;It is possible to invoke system calls directly by using syscall [&lt;a href=&#34;http://man7.org/linux/man-pages/man2/syscall.2.html&#34;&gt;man 2 syscall&lt;/a&gt;]. But since most programs will rely on glibc functions for system calls, it will be enough to wrap those functions. There are two ways to wrap or override C functions in Linux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using LD_PRELOAD:&lt;/strong&gt; There is a shell environment variable in Linux called
&lt;em&gt;LD_PRELOAD&lt;/em&gt;, which can be set to a path of a shared library, and that library
will be loaded before any other library (including glibc).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using &amp;lsquo;ld --wrap=&lt;em&gt;symbol&lt;/em&gt;&amp;lsquo;:&lt;/strong&gt; This can be used to use a wrapper function
for &lt;em&gt;symbol&lt;/em&gt;. Any further reference to &lt;em&gt;symbol&lt;/em&gt; will be resolved to the
wrapper function. [&lt;a href=&#34;http://man7.org/linux/man-pages/man1/ld.1.html&#34;&gt;man 1 ld&lt;/a&gt;].&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I explain each approach later, but first lets write a very simple test file.
I plan to wrap &lt;em&gt;write&lt;/em&gt; system call and count the total number of characters that
is being written out.&lt;/p&gt;

&lt;h3 id=&#34;test-file:a3553a81da01374026bea81262624115&#34;&gt;Test file&lt;/h3&gt;

&lt;p&gt;Lets write a very simple test file that calls &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;printf&lt;/em&gt; to write to standard output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
    write(0, &amp;quot;Hello, Kernel!\n&amp;quot;, 15);
    printf(&amp;quot;Hello, World!\n&amp;quot;);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I run the code I get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./bin/test
Hello, Kernel!
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I want to see what are the system calls that are being called when running the test file. I use &lt;em&gt;strace&lt;/em&gt; to see the system calls responsible for writting to the standard output. &lt;em&gt;strace&lt;/em&gt; is being used to trace system calls and signals. Here is the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execve(&amp;quot;./bin/test&amp;quot;, [&amp;quot;./bin/test&amp;quot;], [/* 53 vars */]) = 0
brk(0)                                  = 0x2532000
access(&amp;quot;/etc/ld.so.nohwcap&amp;quot;, F_OK)      = -1 ENOENT (No such file or directory)
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f099cc04000
access(&amp;quot;/etc/ld.so.preload&amp;quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&amp;quot;/etc/ld.so.cache&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=128624, ...}) = 0
mmap(NULL, 128624, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f099cbe4000
close(3)                                = 0
access(&amp;quot;/etc/ld.so.nohwcap&amp;quot;, F_OK)      = -1 ENOENT (No such file or directory)
open(&amp;quot;/lib/x86_64-linux-gnu/libc.so.6&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
read(3, &amp;quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&amp;gt;\0\1\0\0\0\320\37\2\0\0\0\0\0&amp;quot;..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=1845024, ...}) = 0
mmap(NULL, 3953344, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f099c61e000
mprotect(0x7f099c7d9000, 2097152, PROT_NONE) = 0
mmap(0x7f099c9d9000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1bb000) = 0x7f099c9d9000
mmap(0x7f099c9df000, 17088, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f099c9df000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f099cbe3000
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f099cbe1000
arch_prctl(ARCH_SET_FS, 0x7f099cbe1740) = 0
mprotect(0x7f099c9d9000, 16384, PROT_READ) = 0
mprotect(0x600000, 4096, PROT_READ)     = 0
mprotect(0x7f099cc06000, 4096, PROT_READ) = 0
munmap(0x7f099cbe4000, 128624)          = 0
write(0, &amp;quot;Hello, Kernel!\n&amp;quot;, 15Hello, Kernel!)        = 15
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 3), ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f099cc03000
write(1, &amp;quot;Hello, World!\n&amp;quot;, 14Hello, World!)         = 14
exit_group(0)                           = ?
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see lines 26 and 29 are where the &lt;em&gt;write&lt;/em&gt; system call related to our
code is being called. Since our goal is to wrap glibc functions, lets check
output of &lt;em&gt;ltrace&lt;/em&gt; as well. &lt;em&gt;ltrace&lt;/em&gt; intercepts and records the dynamic library
calls which are called by the executed process [&lt;a href=&#34;http://man7.org/linux/man-pages/man1/ltrace.1.html&#34;&gt;man 1 ltrace&lt;/a&gt;]. Here is the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__libc_start_main(0x40057d, 1, 0x7fffdd1ec628, 0x4005b0 &amp;lt;unfinished ...&amp;gt;
write(0, &amp;quot;Hello, Kernel!\n&amp;quot;, 15Hello, Kernel!
)                                          = 15
puts(&amp;quot;Hello, World!&amp;quot;Hello, World!)         = 14
+++ exited (status 0) +++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;ltrace&lt;/em&gt; result shows that the &lt;em&gt;write&lt;/em&gt; function in the code is calling the
&lt;em&gt;write&lt;/em&gt; function from glibc, but &lt;em&gt;printf&lt;/em&gt; is calling &lt;em&gt;puts&lt;/em&gt; from glibc. So we
should be careful here, overriding only the &lt;em&gt;write&lt;/em&gt; function from glibc will not
cause the &lt;em&gt;write&lt;/em&gt; system call from &lt;em&gt;printf&lt;/em&gt; to be wrapped. We need to
differentiate between the final system call and the glibc library call. So in
order to cover both of the cases, I need to override &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;puts&lt;/em&gt;
functions. Now lets jump into wrapping these functions.&lt;/p&gt;

&lt;h2 id=&#34;using-ld-preload:a3553a81da01374026bea81262624115&#34;&gt;Using LD_PRELOAD&lt;/h2&gt;

&lt;p&gt;LD_PRELOAD allows a shared library to be loaded before any other libraries. So
all I need to do is to write a shared library that overrides &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;puts&lt;/em&gt;
functions. If we wrap these functions, we need a way to call the real functions
to perform the system call. &lt;em&gt;dlsym&lt;/em&gt; just do that for us [&lt;a href=&#34;http://man7.org/linux/man-pages/man3/dlsym.3.html&#34;&gt;man 3 dlsym&lt;/a&gt;]:
&amp;gt; The function dlsym() takes a &amp;ldquo;handle&amp;rdquo; of a dynamic library returned
       by dlopen() and the null-terminated symbol name, returning the
       address where that symbol is loaded into memory.  If the symbol is
       not found, in the specified library or any of the libraries that were
       automatically loaded by dlopen() when that library was loaded,
       dlsym() returns NULL&amp;hellip;&lt;/p&gt;

&lt;p&gt;So inside the wrapper function we can use dlsym to get the address of the related symbol in memory and call the glibc function. Another approach can be calling the syscall directly, both approaches will work. Here is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define _GNU_SOURCE
#include &amp;lt;dlfcn.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

/* Function pointers to hold the value of the glibc functions */
static  ssize_t (*real_write)(int fd, const void *buf, size_t count) = NULL;
static int (*real_puts)(const char* str) = NULL;

/* wrapping write function call */
ssize_t write(int fd, const void *buf, size_t count)
{

    /* printing out the number of characters */
    printf(&amp;quot;write:chars#:%lu\n&amp;quot;, count);
    /* reslove the real write function from glibc
     * and pass the arguments.
     */
    real_write = dlsym(RTLD_NEXT, &amp;quot;write&amp;quot;);
    real_write(fd, buf, count);

}

int puts(const char* str)
{

    /* printing out the number of characters */
    printf(&amp;quot;puts:chars#:%lu\n&amp;quot;, strlen(str));
    /* resolve the real puts function from glibc
     * and pass the arguments.
     */
    real_puts = dlsym(RTLD_NEXT, &amp;quot;puts&amp;quot;);
    real_puts(str);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We first declare pointers to hold the value of the glibc functions, we will use these later to get the pointer from &lt;em&gt;dlsym&lt;/em&gt;. Then we simply implement the glibc functions that we want to wrap, add our code and finally call the real function to perform the intended task.&lt;/p&gt;

&lt;h4 id=&#34;compiling-the-shared-library:a3553a81da01374026bea81262624115&#34;&gt;Compiling the shared library&lt;/h4&gt;

&lt;p&gt;We compile the shared library as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -fPIC -shared  -o bin/libpreload.so src/wrap-preload.c -ldl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to make sure we are generating a position-independent code(PIC) by passing &lt;code&gt;-fPIC&lt;/code&gt; that is shared &lt;code&gt;-shared&lt;/code&gt;. We also need to link our library with Dynamically Loaded (DL) libraries &lt;code&gt;-ldl&lt;/code&gt;, since we are using dlsym in our code.&lt;/p&gt;

&lt;p&gt;To run our test code and wrap glibc functions, we simply set &lt;code&gt;LD_PRELOAD&lt;/code&gt; enviornment variable to the generated shared object file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ LD_PRELOAD=/home/saman/Programming/wrap-syscall/bin/libpreload.so ./bin/test
write:chars#:15
Hello, Kernel!
puts:chars#:13
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;LD_PRELOAD&lt;/code&gt; loads the libpreload.so library before the execution of our code, and thus calling &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;puts&lt;/em&gt; will call our wrapper functions inside the library.&lt;/p&gt;

&lt;h2 id=&#34;using-ld-wrap-symbol:a3553a81da01374026bea81262624115&#34;&gt;Using &lt;em&gt;ld --wrap=symbol&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Another way of wrapping functions is by using linker at the link time. GNU linker provides an option to wrap a function for a symbol [&lt;a href=&#34;http://man7.org/linux/man-pages/man1/ld.1.html&#34;&gt;man 1 ld&lt;/a&gt;]:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use a wrapper function for symbol.  Any undefined reference to
           symbol will be resolved to &amp;ldquo;&lt;strong&gt;wrap_symbol&amp;rdquo;.  Any undefined
           reference to &amp;ldquo;&lt;/strong&gt;real_symbol&amp;rdquo; will be resolved to symbol.&lt;/p&gt;

&lt;p&gt;This can be used to provide a wrapper for a system function.  The
           wrapper function should be called &amp;ldquo;&lt;strong&gt;wrap_symbol&amp;rdquo;.  If it wishes
           to call the system function, it should call &amp;ldquo;&lt;/strong&gt;real_symbol&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Here is a trivial example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   void *
   __wrap_malloc (size_t c)
   {
    printf (&amp;quot;malloc called with %zu\n&amp;quot;, c);
    return __real_malloc (c);
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you link other code with this file using &amp;ndash;wrap malloc, then
    all calls to &amp;ldquo;malloc&amp;rdquo; will call the function &amp;ldquo;&lt;strong&gt;wrap_malloc&amp;rdquo;
    instead.  The call to &amp;ldquo;&lt;/strong&gt;real_malloc&amp;rdquo; in &amp;ldquo;__wrap_malloc&amp;rdquo; will
    call the real &amp;ldquo;malloc&amp;rdquo; function.&lt;/p&gt;

&lt;p&gt;You may wish to provide a &amp;ldquo;&lt;strong&gt;real_malloc&amp;rdquo; function as well, so
    that links without the &amp;ndash;wrap option will succeed.  If you do
    this, you should not put the definition of &amp;ldquo;&lt;/strong&gt;real_malloc&amp;rdquo; in the
    same file as &amp;ldquo;__wrap_malloc&amp;rdquo;; if you do, the assembler may
    resolve the call before the linker has a chance to wrap it to
    &amp;ldquo;malloc&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on the description, we need to implement two function &lt;code&gt;__real_symbol&lt;/code&gt; and &lt;code&gt;__wrap_symbol&lt;/code&gt; (in our case &lt;code&gt;__real_write&lt;/code&gt; and &lt;code&gt;__wrap_write&lt;/code&gt;), and link the application with our code. Here is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

/* create pointers for real glibc functions */
ssize_t __real_write(int fd, const void *buf, size_t count);
int __real_puts(const char* str);


/* wrapping write function */


ssize_t __wrap_write (int fd, const void *buf, size_t count)
{
    /* printing out the number of characters */
    printf(&amp;quot;write:chars#:%lu\n&amp;quot;, count);

    /* call the real glibc function and return the result */
    ssize_t result = __real_write(fd, buf, count);
    return result;
}

/* wrapping puts function */
int __wrap_puts (const char* str)
{
    /* printing out the number of characters */
    printf(&amp;quot;puts:chars#:%lu\n&amp;quot;, strlen(str));

    /* call the real glibc function and return the result */
    int result = __real_puts(str);
    return result;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is very straight forward, but now lets try to compile the code and link it with our test application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -c src/wrap-link.c -o bin/wrap-link.o
gcc -c src/test.c -o bin/test-link.o
gcc -Wl,-wrap,write -Wl,-wrap=write -Wl,-wrap=puts bin/test-link.o bin/wrap-link.o -o bin/test-link-bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used &lt;em&gt;gcc&lt;/em&gt; to pass the option to the linker with &lt;code&gt;-Wl&lt;/code&gt;, which is equal to calling &lt;code&gt;ld&lt;/code&gt; with &lt;code&gt;--wrap&lt;/code&gt; option. Now if I run the code I get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./bin/test-link-bin
write:chars#:15
Hello, Kernel!
puts:chars#:13
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:a3553a81da01374026bea81262624115&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In order to wrap system calls in Linux, one have to wrap related glibc function calls. You have to be careful about the type of system calls you are tryting to override, since various functions might call different functions from glibc, e.g. &lt;em&gt;printf&lt;/em&gt; calls &lt;em&gt;puts&lt;/em&gt; from glibc which calls &lt;em&gt;write&lt;/em&gt; at the end.&lt;/p&gt;

&lt;p&gt;There are two ways to do this: 1-Using &lt;code&gt;LD_PRELOAD&lt;/code&gt; environment variable, 2-using &lt;code&gt;ld --wrap&lt;/code&gt;. I personally prefer the first approach since if the number of wrapper functions increases I do not have to specify them one by one, as in the second case.&lt;/p&gt;

&lt;p&gt;You can find the source code and the related Makefile in the following github repository: &lt;a href=&#34;wrap-syscall&#34;&gt;https://github.com/samanbarghi/wrap-syscall&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>National Geographic Photo of the day Downloader for Linux</title>
      <link>http://samanbarghi.com/2012/08/29/national-geographic-photo-of-the-day-downloader-for-linux</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2012/08/29/national-geographic-photo-of-the-day-downloader-for-linux</guid>
      <description>

&lt;p&gt;[&lt;img class=&#34;wp-image-252 alignleft&#34; title=&#34;National Geographic Photo Of the Day&#34; src=&#34;http://www.samanbarghi.com/wp-content/uploads/2012/08/57275_1600x1200-wallpaper-cb1343743721-300x225.jpg&#34; alt=&#34;National Geographic Photo Of the Day&#34; width=&#34;300&#34; height=&#34;225&#34; /&gt;][1] I am a fan of National Geographic photos on their site, and I also get bored of by my desktop background after a while. So I decided to create a script to download National Geographic photo of the day, and using it as my desktop background. I am using it over Gnome3 (I am using Fedora as I think it&amp;#8217;s more stable than Ubuntu, and I like Gnome3 way better than Unity), but if you are a Unity user it should work for you as well. You can find the script here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a title=&#34;https://github.com/samanbarghi/ngphotodownloader&#34; href=&#34;https://github.com/samanbarghi/ngphotodownloader&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/samanbarghi/ngphotodownloader&#34;&gt;https://github.com/samanbarghi/ngphotodownloader&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although National Geographic posts a photo everyday, not all the photos come with a high quality format. So the script checks whether a wallpaper format exists or not. If so, it downloads the photo into the same directory the script resides.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;setup:2322363d5b3491b8421298be27f8697e&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;All you need to do is  create a directory for your wallpaper and put the script in there, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Pictures/
git clone https://github.com/samanbarghi/ngphotodownloader.git NGWallpapers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply run the script to get the Photo of the day. But doing that manually everyday is not fun. Here cron comes handy. You need to run the script at least once each day, to automate the process you can use cron to download the script and set it as your desktop background:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 12 * * * sh /home/yourusername/Pictures/NGWallpapers/ngwallpaper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case since I am running the script on my laptop, and my laptop is not always on; I call the script every 3 hours to make sure it runs at least once each day. Don&amp;#8217;t worry about duplicates, the script will not download the image if it already exists in the directory. The overhead of the script on cpu/memory/network is negligible, so don&amp;#8217;t worry about calling the script 8 times a day:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00 */3 * * * sh /home/yourusername/Pictures/NGWallpapers/ngwallpaper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy! &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&#34;http://www.samanbarghi.com/wp-content/uploads/2012/08/57275_1600x1200-wallpaper-cb1343743721.jpg&#34;&gt;http://www.samanbarghi.com/wp-content/uploads/2012/08/57275_1600x1200-wallpaper-cb1343743721.jpg&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Might My Resume look Like If I Were a Computer !?</title>
      <link>http://samanbarghi.com/2012/05/21/what-might-my-resume-look-like-if-i-were-a-computer</link>
      <pubDate>Mon, 21 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2012/05/21/what-might-my-resume-look-like-if-i-were-a-computer</guid>
      <description>

&lt;p&gt;The other day I was about to update my resume, and this crazy question came to my mind:&lt;br /&gt;
&lt;strong&gt;What might my resume look like if I were a computer ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And &lt;a href=&#34;http://samanbarghi.com/resume/&#34; title=&#34;I am Computer&#34;&gt;This was the result.&lt;/a&gt; (Best viewed in Chrome and Firefox, if I turn to a computer I will run Unix based systems and IE does not exist in my world).&lt;/p&gt;

&lt;p&gt;Well, I am aware that I would not wake up one morning finding out I turned into a computer. Also, I am not sure if one day I turn into a computer, I would look for a job. It is not unexpected that someday robots apply for jobs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am an intel-based robot with 128 cores, 2 extra GPUs and lots and lots of storage. Great at multi-tasking, equipped with state of the art AI technologies; can adapt to any environment and a quick learner. I also have teleportation abilities, but the module is missing so you have to buy the module and train me to do that. Originally designed to compose and play music, but I also can cook, clean and do programming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;here-is-how-i-came-up-with-me-as-a-computer-resume-2:4b9a2f0cc21d2fa557cbbde11ed224e0&#34;&gt;Here is how I came up with &lt;a href=&#34;http://samanbarghi.com/resume/&#34; title=&#34;I am a Computer&#34;&gt;me as a computer resume&lt;/a&gt;:&lt;/h2&gt;

&lt;p&gt;Lets see how a computer do it&amp;#8217;s job from inside out. In the heart of the computer, there lays CPU which does most of the hard work and it defines the base characteristics of the system. Frequency, Processing units, Registers, Memory management, and etc. If I were a computer, I would ask myself: What are my core features that are defining my characteristics? In human world, it translates to very basic human characteristics and personality. Being a team player, public speaker, GTD type of person, Introvert, active, passive, and so on. Basically, I question the way I define myself. This will be the core of the system.&lt;/p&gt;

&lt;p&gt;In addition, one important part of the computer systems is the &lt;a href=&#34;http://en.wikipedia.org/wiki/Memory_hierarchy&#34;&gt;memory hierarchy&lt;/a&gt;. to simplify things, lets assume memory hierarchy only consists of Hard Drive, RAM and processor caches (L1, L2 and L3) . Each core has access to all these memory elements, and the difference is the time it takes for the core to access each of them. At the very top of the hierarchy we have Level 1 Cache (L1), which has a very fast access time but it comes in very small size. As we move down the hierarchy (L2 -&amp;gt; L3 -&amp;gt; RAM), the access time gets longer and the size of the memory becomes bigger. It means the lower the memory element is in the hierarchy, the more time CPU has to spend to fetch the data from that element.&lt;/p&gt;

&lt;p&gt;[&lt;img src=&#34;http://www.samanbarghi.com/wp-content/uploads/2012/05/mem_hi-300x260.gif&#34; alt=&#34;&#34; title=&#34;mem_hi&#34; width=&#34;300&#34; height=&#34;260&#34; class=&#34;aligncenter size-medium wp-image-228&#34; style=&#34;margin:auto&#34; /&gt;][4]&lt;br /&gt;
But how does this all work together? Well there is a concept called temporal locality (also there exists Spatial Locality which is not related to me being a computer !!), it means the most recent data being used at a certain point in time should be closer to the core of the system. Because this data will most probably be used in the near future. So recently used data can be accessed faster, and since most probably it will be accessed in the near future again, it makes the system works faster by removing the accessing cost to that data. For it to work, the CPU moves the data it needs to access at a certain point in time from RAM to each cache level based on recency of the data. So data in L1 is being served at the moment, and data in L3 has been accessed a while ago.&lt;/p&gt;

&lt;p&gt;If we look closely, the same concept applies in our lives. In my case, there are skills and programming languages which I am actively using right now in various projects. The cost of accessing those skills for me is almost zero (My L1 cache as a computer). However, there are a couple of programming languages and technologies that I am using along with L1 skills and they are being accessed frequently as well. The cost to activate those skills is very small but not zero. There are also some programming languages I used during the past years, or I have played with them a while ago, and the price of activating them for me will be to read some documents, write some sample programs and it takes time for me to get comfortable with them again. Those stuff fits into my L3 cache. RAM normally holds the data related to the processes running in a CPU, and in human world I translate them to the general skills that are in there and can be loaded to caches anytime. Web development, mobile app development, these are general info that float in my RAM ! I talk about the hard drive in a bit.&lt;/p&gt;

&lt;p&gt;Well of course without the mainboard, all of these are nothing. CPU and RAM attach to the mainboard, and the mainboard provides the connectors for various parts. It connects the CPU to RAM, Hard Drive and all other devices. CPU also gets all its power from the mainboard. Mainboard basically provides support for the rest of the system. In human world, we can ask ourselves, which one of our features provides support for what we already put in our CPU and Memory? My answer was: achievements. Achievements can be education, work experiences, projects, and awards. These achievements connects the person who is reviewing our resume to the skills in our memory, or personality in our CPU.&lt;/p&gt;

&lt;p&gt;Another device that attaches to the mainboard, is hard drive. Hard drive is for storing a whole bunch of data, and it&amp;#8217;s external to the mainboard. Photos, Videos, Documents and programs reside in the Hard Drive. There are various types of data in the hard-drive, but not all are related to the job I (as a computer) am applying for. The whole system has already loaded what is required for a job in the RAM and caches. What left is all other none-related data, which can be loaded at the times I am not applying for jobs or doing a job ! In human world, I say all the interests, hobbies, and activities that are not related to their jobs are stored in the hard drive. Although, this is not related to the job itself, but it can demonstrate how interesting a person is.&lt;/p&gt;

&lt;p&gt;I applied the rules above to myself and came up with &lt;a href=&#34;http://samanbarghi.com/resume/&#34; title=&#34;I am a Computer&#34;&gt;me as a computer resume&lt;/a&gt;. If someone take a look at this resume, by one look they know if they are interested in what I am doing or not. So the real question is not whether one day I turn into a computer or not, it is why in 21st century most resumes are still flat lists and lack a specific hierarchy? I would be bored looking at hundreds of flat listed resumes each having pages and pages of information, I would be happy to hear from other peoples&amp;#8217;s point of view? Although there are some really creative resume designs out there, what would be your suggestion to change the way most people present their resume !? What would your resume look like if you wanted to think out of the box!? What type of info helps HR and hiring staff evaluate a resume better? is there any research going on this subject?&lt;/p&gt;

&lt;p&gt;[4]: &lt;a href=&#34;http://www.samanbarghi.com/wp-content/uploads/2012/05/mem_hi.gif&#34;&gt;http://www.samanbarghi.com/wp-content/uploads/2012/05/mem_hi.gif&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Notes on Facebook Hacker Cup Qualification Round</title>
      <link>http://samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round</link>
      <pubDate>Tue, 11 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round</guid>
      <description>&lt;p&gt;Monday, January 10 was the last day to submit your answers to get qualified for Facebook Hacker Cup. It started from January 7, and lasted for 3 days. There were three problems presented on the competition website, to be solved by participants. Problems were provided with sample input and output, and there were no time limits to browse through the problems and to develop your code. To answer each problem, competitors had to download an input and submit their output, yet they only had 6 minutes, after they downloaded the input, to submit their answers through the form provided. There were absolutely no limitations on choosing the programming language (I used Perl), nor on the way you code your solution, cause there were no need to upload your source code. All three problems were fairly easy to solve, except one (called the peg game), that was not explained clearly. Anyone who solve at least one problem, would be qualified for the first round.&lt;/p&gt;

&lt;p&gt;This competition could attract a fairly large number of young people around the world, and by that means, it can be counted as a success. Nevertheless, there were some fundamental design problems regarding the competition website itself, which is the topic of this post. These are some of the points that came into my mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, the rules and regulations of the competition, and the instructions were not presented clearly. Everything was distributed, and there were no centralized approach For instance, one had to register for this round through the event page that was created for this purpose. There was a link in the event description, that  could be used to register. when the event started, additional link were added to the same place which was pointing people to the qualification problem page. I was expecting to see the instructions in the new page and after reading all, I could not find out how I should submit my answers. Thus, I decided to open one problem and after reading that I thought maybe I have to download the input to get the instructions !!! After doing that, I opened the file and could just see some numbers in there. So, I decided to go back to the problem page and all of a sudden I saw the time is counting down. Then I went back to the event page and found out that instructions were added to the event description, under the registration link, and it was also could not be seen unless you click on *&amp;#8220;see more&amp;#8221; *to view the instructions. In addition, news and updates were being posted on another page (Hacker Cup page), and in the last day it seems they took off the  6 minute limit, but I again I failed to get updated, as I did not know such things were going on in a separate page.&lt;/li&gt;
&lt;li&gt;The second issue was related to 6 minute limit for submitting the answers. I agree that there should be some mechanisms that make sure solutions are in the range that designers expect, but in this case it was a very bad idea to control the solutions by a timer. What designers might have thought is that if the code is well-written enough, even if program fails once or twice, well, there should be still enough time for people to run their code and copy-paste the answer. At first glance it seems fair, but they failed to take other parameters into consideration. If people were using same computers with same internet connection, and of course same browsers (it seems chrome had some problems with downloading the input file), and under same circumstances it could be considered as fair. What if someone do not have access to broadband or the connection drops frequently !? Or someone has access to a very powerful computer system which despite any bad coding styles could deliver the answer in less than the amount of time provided ?! My own problem was the &amp;#8220;Peg&amp;#8217;s game&amp;#8221; input, it was big for Putty to handle, so it freeze twice (I was coding on another machine through SSH). Then I had to  start the FTP service, upload the file via FTP, and voila 6 minutes passed !&lt;/li&gt;
&lt;li&gt;The other problem was related to the explanation of the &amp;#8220;Peg&amp;#8217;s game&amp;#8221;. I think it was the most awful description I&amp;#8217;ve ever read in my life. The problem was a piece of cake when one fully understands it. But I think the main challenge here was understanding it. It took me a while to decrypt what was the real purpose of the question and how everything is connected together. I thought maybe it&amp;#8217;s me, and I did search today in order to see if others had any concerns about this problem. As I started to search, I found tons of different interpretations of the problem. So it seems that the designer failed to explain the problem clearly. I think it is related to the *Curse of Knowledge *(Refer to Made to Stick), which claims that the more you know about a subject the less you could know how it feels not knowing about that subject. It probably happened to you too, trying to explain something which seems obvious to you but others cannot understand a thing you are saying.&lt;/li&gt;
&lt;li&gt;The last issue is the name of the competition does not match the content of it. They call it a hacker cup, though there were nothing to hack here, just simple programming questions. I took part in &lt;a title=&#34;HackU&#34; href=&#34;http://developer.yahoo.com/hacku/&#34; target=&#34;_blank&#34;&gt;Yahoo! HackU&lt;/a&gt; last year in University of Waterloo, and it was closer to a hacking competition than this competition. HackU is about using various tools to come up with a neat idea that blow judge&amp;#8217;s mind. I hope next rounds get closer to hacking idea than solving problems. Current situation seems more like Facebook is saying: &amp;#8220;Interviewing this amount of programmers is gonna take a lot of time, we prefer to make a competition online to select our programmers among them. And it&amp;#8217;s a better way cause people have to prove themselves&amp;#8221;. Which is absolutely fine, ( I think all the competitions are all about this), but the only hacking was to hack designers&amp;#8217; mind and the website to get the instructions and understand the problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, it is a very good move from Facebook to gather all this people to compete against each other and express their opinions. I Specially liked the way people could express their opinions on the event wall, there were lots of interesting posts, and most of them could be counted as a feedback ( Which was effective at least for taking off the time limit). I hope in the next round, geeks do not design the website, and get help from more experienced people in this area to take all the basic requirements into considerations.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#39;st\_facebook&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span st\_via=&#39;saman\_b&#39; class=&#39;st\_twitter&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_email&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_sharethis&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_fblike&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_plusone&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;span class=&#39;st\_pinterest&#39; st\_title=&#39;Some Notes on Facebook Hacker Cup Qualification Round&#39; st_url=&#39;http://www.samanbarghi.com/2011/01/11/some-notes-on-facebook-hacker-cup-qualification-round/&#39;&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>